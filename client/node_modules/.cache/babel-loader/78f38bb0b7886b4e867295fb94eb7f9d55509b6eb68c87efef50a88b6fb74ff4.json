{"ast":null,"code":"export function recognizeShape(points) {\n  if (!points || points.length < 15) {\n    console.log(\"Not enough points for recognition\");\n    return null;\n  }\n\n  // Calculate bounding box\n  const xs = points.map(p => p[0]);\n  const ys = points.map(p => p[1]);\n  const minX = Math.min(...xs);\n  const maxX = Math.max(...xs);\n  const minY = Math.min(...ys);\n  const maxY = Math.max(...ys);\n  const width = maxX - minX;\n  const height = maxY - minY;\n\n  // Calculate centroid\n  const centroid = [xs.reduce((sum, x) => sum + x, 0) / xs.length, ys.reduce((sum, y) => sum + y, 0) / ys.length];\n\n  // Circle detection\n  const distances = points.map(p => Math.sqrt(Math.pow(p[0] - centroid[0], 2) + Math.pow(p[1] - centroid[1], 2)));\n  const avgDistance = distances.reduce((sum, d) => sum + d, 0) / distances.length;\n  const variance = distances.reduce((sum, d) => sum + Math.pow(d - avgDistance, 2), 0) / distances.length;\n\n  // Simple circle detection\n  if (variance < 1000 && Math.abs(width - height) < 50) {\n    console.log(\"Circle detected\");\n    return {\n      type: 'circle',\n      x: centroid[0] - avgDistance,\n      y: centroid[1] - avgDistance,\n      radius: avgDistance\n    };\n  }\n\n  // Rectangle detection\n  let rightAngles = 0;\n  const angleThreshold = 0.3; // More tolerant angle\n\n  for (let i = 1; i < points.length - 1; i++) {\n    const p1 = points[i - 1];\n    const p2 = points[i];\n    const p3 = points[i + 1];\n    const v1 = [p2[0] - p1[0], p2[1] - p1[1]];\n    const v2 = [p3[0] - p2[0], p3[1] - p2[1]];\n    const dot = v1[0] * v2[0] + v1[1] * v2[1];\n    const mag1 = Math.sqrt(v1[0] ** 2 + v1[1] ** 2);\n    const mag2 = Math.sqrt(v2[0] ** 2 + v2[1] ** 2);\n    if (mag1 > 1 && mag2 > 1) {\n      const angle = Math.acos(dot / (mag1 * mag2));\n      if (Math.abs(angle - Math.PI / 2) < angleThreshold) {\n        rightAngles++;\n      }\n    }\n  }\n  if (rightAngles >= 3) {\n    console.log(\"Rectangle detected\");\n    return {\n      type: 'rectangle',\n      x: minX,\n      y: minY,\n      width,\n      height\n    };\n  }\n  console.log(\"No shape recognized\");\n  return null;\n}","map":{"version":3,"names":["recognizeShape","points","length","console","log","xs","map","p","ys","minX","Math","min","maxX","max","minY","maxY","width","height","centroid","reduce","sum","x","y","distances","sqrt","pow","avgDistance","d","variance","abs","type","radius","rightAngles","angleThreshold","i","p1","p2","p3","v1","v2","dot","mag1","mag2","angle","acos","PI"],"sources":["C:/Users/Amoolya Suneja/Desktop/AI-Liveboard/client/src/utils/shapeRecognition.js"],"sourcesContent":["export function recognizeShape(points) {\r\n  if (!points || points.length < 15) {\r\n    console.log(\"Not enough points for recognition\");\r\n    return null;\r\n  }\r\n  \r\n  // Calculate bounding box\r\n  const xs = points.map(p => p[0]);\r\n  const ys = points.map(p => p[1]);\r\n  const minX = Math.min(...xs);\r\n  const maxX = Math.max(...xs);\r\n  const minY = Math.min(...ys);\r\n  const maxY = Math.max(...ys);\r\n  const width = maxX - minX;\r\n  const height = maxY - minY;\r\n  \r\n  // Calculate centroid\r\n  const centroid = [\r\n    xs.reduce((sum, x) => sum + x, 0) / xs.length,\r\n    ys.reduce((sum, y) => sum + y, 0) / ys.length\r\n  ];\r\n  \r\n  // Circle detection\r\n  const distances = points.map(p => \r\n    Math.sqrt(Math.pow(p[0] - centroid[0], 2) + Math.pow(p[1] - centroid[1], 2))\r\n  );\r\n  const avgDistance = distances.reduce((sum, d) => sum + d, 0) / distances.length;\r\n  const variance = distances.reduce((sum, d) => \r\n    sum + Math.pow(d - avgDistance, 2), 0) / distances.length;\r\n  \r\n  // Simple circle detection\r\n  if (variance < 1000 && Math.abs(width - height) < 50) {\r\n    console.log(\"Circle detected\");\r\n    return {\r\n      type: 'circle',\r\n      x: centroid[0] - avgDistance,\r\n      y: centroid[1] - avgDistance,\r\n      radius: avgDistance\r\n    };\r\n  }\r\n  \r\n  // Rectangle detection\r\n  let rightAngles = 0;\r\n  const angleThreshold = 0.3; // More tolerant angle\r\n  \r\n  for (let i = 1; i < points.length - 1; i++) {\r\n    const p1 = points[i-1];\r\n    const p2 = points[i];\r\n    const p3 = points[i+1];\r\n    \r\n    const v1 = [p2[0] - p1[0], p2[1] - p1[1]];\r\n    const v2 = [p3[0] - p2[0], p3[1] - p2[1]];\r\n    \r\n    const dot = v1[0]*v2[0] + v1[1]*v2[1];\r\n    const mag1 = Math.sqrt(v1[0]**2 + v1[1]**2);\r\n    const mag2 = Math.sqrt(v2[0]**2 + v2[1]**2);\r\n    \r\n    if (mag1 > 1 && mag2 > 1) {\r\n      const angle = Math.acos(dot / (mag1 * mag2));\r\n      if (Math.abs(angle - Math.PI/2) < angleThreshold) {\r\n        rightAngles++;\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (rightAngles >= 3) {\r\n    console.log(\"Rectangle detected\");\r\n    return {\r\n      type: 'rectangle',\r\n      x: minX,\r\n      y: minY,\r\n      width,\r\n      height\r\n    };\r\n  }\r\n  \r\n  console.log(\"No shape recognized\");\r\n  return null;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}