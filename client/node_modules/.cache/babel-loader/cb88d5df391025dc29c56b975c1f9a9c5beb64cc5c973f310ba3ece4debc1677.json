{"ast":null,"code":"export function recognizeShape(points) {\n  if (!points || points.length < 6) return null;\n\n  // Calculate bounding box\n  const xs = points.map(p => p[0]);\n  const ys = points.map(p => p[1]);\n  const minX = Math.min(...xs);\n  const maxX = Math.max(...xs);\n  const minY = Math.min(...ys);\n  const maxY = Math.max(...ys);\n  const width = maxX - minX;\n  const height = maxY - minY;\n  const centerX = (minX + maxX) / 2;\n  const centerY = (minY + maxY) / 2;\n\n  // Skip very small shapes\n  if (width < 20 || height < 20) return null;\n\n  // Calculate path length\n  let pathLength = 0;\n  for (let i = 1; i < points.length; i++) {\n    pathLength += Math.hypot(points[i][0] - points[i - 1][0], points[i][1] - points[i - 1][1]);\n  }\n\n  // Calculate shape closure\n  const startEndDist = Math.hypot(points[0][0] - points[points.length - 1][0], points[0][1] - points[points.length - 1][1]);\n  const isClosedShape = startEndDist < Math.min(width, height) * 0.6;\n\n  // Multiple detection methods\n  const circleScore = detectCircle(points, centerX, centerY, width, height, pathLength);\n  const rectScore = detectRectangle(points, width, height, pathLength);\n  console.log('Shape Analysis:', {\n    points: points.length,\n    width,\n    height,\n    aspectRatio: Math.min(width, height) / Math.max(width, height),\n    startEndDist,\n    isClosedShape,\n    circleScore,\n    rectScore\n  });\n\n  // Improved decision logic with stricter thresholds\n  const circleThreshold = 0.7; // Increased from 0.5\n  const rectThreshold = 0.6; // Increased from 0.5\n  const margin = 0.2; // Reduced from 0.15\n\n  // Only detect circle if it's clearly a circle\n  if (circleScore > circleThreshold && circleScore > rectScore + margin) {\n    const radius = Math.min(width, height) / 2;\n    return {\n      type: 'circle',\n      x: centerX - radius,\n      y: centerY - radius,\n      radius: radius\n    };\n  }\n\n  // Only detect rectangle if it's clearly a rectangle\n  if (rectScore > rectThreshold && rectScore > circleScore + margin) {\n    return {\n      type: 'rectangle',\n      x: minX,\n      y: minY,\n      width: width,\n      height: height\n    };\n  }\n  return null;\n}\nfunction detectCircle(points, centerX, centerY, width, height, pathLength) {\n  // Method 1: Distance from center consistency\n  let totalDist = 0;\n  let distances = [];\n  points.forEach(point => {\n    const dist = Math.hypot(point[0] - centerX, point[1] - centerY);\n    distances.push(dist);\n    totalDist += dist;\n  });\n  const avgDist = totalDist / points.length;\n\n  // Calculate variance in distances\n  let variance = 0;\n  distances.forEach(dist => {\n    variance += Math.pow(dist - avgDist, 2);\n  });\n  variance = variance / distances.length;\n\n  // Method 2: Expected vs actual circumference\n  const radius = Math.min(width, height) / 2;\n  const expectedCirc = 2 * Math.PI * radius;\n  const circRatio = pathLength / expectedCirc;\n\n  // Method 3: Aspect ratio (should be very close to 1 for circles)\n  const aspectRatio = Math.min(width, height) / Math.max(width, height);\n\n  // Method 4: Direction changes (circles should have many gradual changes)\n  let directionChanges = 0;\n  const directions = [];\n  for (let i = 1; i < points.length; i++) {\n    const dx = points[i][0] - points[i - 1][0];\n    const dy = points[i][1] - points[i - 1][1];\n    if (Math.abs(dx) > 0.5 || Math.abs(dy) > 0.5) {\n      directions.push(Math.atan2(dy, dx));\n    }\n  }\n  for (let i = 1; i < directions.length; i++) {\n    const angleDiff = Math.abs(directions[i] - directions[i - 1]);\n    if (angleDiff > Math.PI / 12) directionChanges++;\n  }\n\n  // Circle should have many small direction changes, not few large ones\n  const directionScore = Math.min(directionChanges / 20, 1);\n\n  // Stricter scoring for circles\n  const varianceScore = 1 - Math.min(variance / (radius * radius * 0.5), 1); // More strict\n  const circScore = 1 - Math.abs(circRatio - 1);\n  const aspectScore = Math.pow(aspectRatio, 2); // Square to penalize non-circular shapes more\n\n  // Require high aspect ratio for circles\n  if (aspectRatio < 0.8) {\n    return 0; // Not circular enough\n  }\n\n  // Require good circumference ratio\n  if (Math.abs(circRatio - 1) > 0.3) {\n    return 0; // Circumference too far from expected\n  }\n  const finalScore = varianceScore * 0.4 + circScore * 0.3 + aspectScore * 0.2 + directionScore * 0.1;\n  console.log('Circle Detection:', {\n    varianceScore,\n    circScore,\n    aspectScore,\n    directionScore,\n    finalScore,\n    directionChanges,\n    aspectRatio,\n    circRatio\n  });\n  return finalScore;\n}\nfunction detectRectangle(points, width, height, pathLength) {\n  // Method 1: Direction changes (should be around 4 for rectangle)\n  let directionChanges = 0;\n  const directions = [];\n  for (let i = 1; i < points.length; i++) {\n    const dx = points[i][0] - points[i - 1][0];\n    const dy = points[i][1] - points[i - 1][1];\n    if (Math.abs(dx) > 0.5 || Math.abs(dy) > 0.5) {\n      directions.push(Math.atan2(dy, dx));\n    }\n  }\n  for (let i = 1; i < directions.length; i++) {\n    const angleDiff = Math.abs(directions[i] - directions[i - 1]);\n    if (angleDiff > Math.PI / 6) directionChanges++;\n  }\n\n  // Method 2: Expected vs actual perimeter\n  const expectedPerim = 2 * (width + height);\n  const perimRatio = pathLength / expectedPerim;\n  const perimScore = 1 - Math.abs(perimRatio - 1);\n\n  // Method 3: Aspect ratio (rectangles can be any ratio, but not too extreme)\n  const aspectRatio = Math.min(width, height) / Math.max(width, height);\n\n  // Method 4: Straight line detection\n  let straightLines = 0;\n  for (let i = 2; i < points.length; i++) {\n    const p1 = points[i - 2];\n    const p2 = points[i - 1];\n    const p3 = points[i];\n    const angle1 = Math.atan2(p2[1] - p1[1], p2[0] - p1[0]);\n    const angle2 = Math.atan2(p3[1] - p2[1], p3[0] - p2[0]);\n    const angleDiff = Math.abs(angle1 - angle2);\n    if (angleDiff < Math.PI / 12) straightLines++;\n  }\n  const straightLineScore = Math.min(straightLines / points.length, 1);\n\n  // Method 5: Corner detection (should have 4 distinct corners)\n  const cornerScore = 1 - Math.abs(directionChanges - 4) / 4;\n\n  // Combine scores\n  const finalScore = cornerScore * 0.4 + perimScore * 0.3 + straightLineScore * 0.2 + aspectRatio * 0.1;\n  console.log('Rectangle Detection:', {\n    directionChanges,\n    cornerScore,\n    perimScore,\n    straightLineScore,\n    aspectRatio,\n    finalScore\n  });\n  return finalScore;\n}","map":{"version":3,"names":["recognizeShape","points","length","xs","map","p","ys","minX","Math","min","maxX","max","minY","maxY","width","height","centerX","centerY","pathLength","i","hypot","startEndDist","isClosedShape","circleScore","detectCircle","rectScore","detectRectangle","console","log","aspectRatio","circleThreshold","rectThreshold","margin","radius","type","x","y","totalDist","distances","forEach","point","dist","push","avgDist","variance","pow","expectedCirc","PI","circRatio","directionChanges","directions","dx","dy","abs","atan2","angleDiff","directionScore","varianceScore","circScore","aspectScore","finalScore","expectedPerim","perimRatio","perimScore","straightLines","p1","p2","p3","angle1","angle2","straightLineScore","cornerScore"],"sources":["C:/Users/Amoolya Suneja/Desktop/AI-Liveboard/client/src/utils/shapeRecognition.js"],"sourcesContent":["export function recognizeShape(points) {\r\n  if (!points || points.length < 6) return null;\r\n\r\n  // Calculate bounding box\r\n  const xs = points.map(p => p[0]);\r\n  const ys = points.map(p => p[1]);\r\n  const minX = Math.min(...xs);\r\n  const maxX = Math.max(...xs);\r\n  const minY = Math.min(...ys);\r\n  const maxY = Math.max(...ys);\r\n  const width = maxX - minX;\r\n  const height = maxY - minY;\r\n  const centerX = (minX + maxX) / 2;\r\n  const centerY = (minY + maxY) / 2;\r\n\r\n  // Skip very small shapes\r\n  if (width < 20 || height < 20) return null;\r\n\r\n  // Calculate path length\r\n  let pathLength = 0;\r\n  for (let i = 1; i < points.length; i++) {\r\n    pathLength += Math.hypot(\r\n      points[i][0] - points[i-1][0],\r\n      points[i][1] - points[i-1][1]\r\n    );\r\n  }\r\n\r\n  // Calculate shape closure\r\n  const startEndDist = Math.hypot(\r\n    points[0][0] - points[points.length-1][0],\r\n    points[0][1] - points[points.length-1][1]\r\n  );\r\n  const isClosedShape = startEndDist < Math.min(width, height) * 0.6;\r\n\r\n  // Multiple detection methods\r\n  const circleScore = detectCircle(points, centerX, centerY, width, height, pathLength);\r\n  const rectScore = detectRectangle(points, width, height, pathLength);\r\n\r\n  console.log('Shape Analysis:', {\r\n    points: points.length,\r\n    width,\r\n    height,\r\n    aspectRatio: Math.min(width, height) / Math.max(width, height),\r\n    startEndDist,\r\n    isClosedShape,\r\n    circleScore,\r\n    rectScore\r\n  });\r\n\r\n  // Improved decision logic with stricter thresholds\r\n  const circleThreshold = 0.7;  // Increased from 0.5\r\n  const rectThreshold = 0.6;    // Increased from 0.5\r\n  const margin = 0.2;           // Reduced from 0.15\r\n  \r\n  // Only detect circle if it's clearly a circle\r\n  if (circleScore > circleThreshold && circleScore > rectScore + margin) {\r\n    const radius = Math.min(width, height) / 2;\r\n    return {\r\n      type: 'circle',\r\n      x: centerX - radius,\r\n      y: centerY - radius,\r\n      radius: radius\r\n    };\r\n  }\r\n  \r\n  // Only detect rectangle if it's clearly a rectangle\r\n  if (rectScore > rectThreshold && rectScore > circleScore + margin) {\r\n    return {\r\n      type: 'rectangle',\r\n      x: minX,\r\n      y: minY,\r\n      width: width,\r\n      height: height\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction detectCircle(points, centerX, centerY, width, height, pathLength) {\r\n  // Method 1: Distance from center consistency\r\n  let totalDist = 0;\r\n  let distances = [];\r\n  \r\n  points.forEach(point => {\r\n    const dist = Math.hypot(point[0] - centerX, point[1] - centerY);\r\n    distances.push(dist);\r\n    totalDist += dist;\r\n  });\r\n  \r\n  const avgDist = totalDist / points.length;\r\n  \r\n  // Calculate variance in distances\r\n  let variance = 0;\r\n  distances.forEach(dist => {\r\n    variance += Math.pow(dist - avgDist, 2);\r\n  });\r\n  variance = variance / distances.length;\r\n  \r\n  // Method 2: Expected vs actual circumference\r\n  const radius = Math.min(width, height) / 2;\r\n  const expectedCirc = 2 * Math.PI * radius;\r\n  const circRatio = pathLength / expectedCirc;\r\n  \r\n  // Method 3: Aspect ratio (should be very close to 1 for circles)\r\n  const aspectRatio = Math.min(width, height) / Math.max(width, height);\r\n  \r\n  // Method 4: Direction changes (circles should have many gradual changes)\r\n  let directionChanges = 0;\r\n  const directions = [];\r\n  \r\n  for (let i = 1; i < points.length; i++) {\r\n    const dx = points[i][0] - points[i-1][0];\r\n    const dy = points[i][1] - points[i-1][1];\r\n    if (Math.abs(dx) > 0.5 || Math.abs(dy) > 0.5) {\r\n      directions.push(Math.atan2(dy, dx));\r\n    }\r\n  }\r\n  \r\n  for (let i = 1; i < directions.length; i++) {\r\n    const angleDiff = Math.abs(directions[i] - directions[i-1]);\r\n    if (angleDiff > Math.PI/12) directionChanges++;\r\n  }\r\n  \r\n  // Circle should have many small direction changes, not few large ones\r\n  const directionScore = Math.min(directionChanges / 20, 1);\r\n  \r\n  // Stricter scoring for circles\r\n  const varianceScore = 1 - Math.min(variance / (radius * radius * 0.5), 1); // More strict\r\n  const circScore = 1 - Math.abs(circRatio - 1);\r\n  const aspectScore = Math.pow(aspectRatio, 2); // Square to penalize non-circular shapes more\r\n  \r\n  // Require high aspect ratio for circles\r\n  if (aspectRatio < 0.8) {\r\n    return 0; // Not circular enough\r\n  }\r\n  \r\n  // Require good circumference ratio\r\n  if (Math.abs(circRatio - 1) > 0.3) {\r\n    return 0; // Circumference too far from expected\r\n  }\r\n  \r\n  const finalScore = (varianceScore * 0.4 + circScore * 0.3 + aspectScore * 0.2 + directionScore * 0.1);\r\n  \r\n  console.log('Circle Detection:', {\r\n    varianceScore,\r\n    circScore,\r\n    aspectScore,\r\n    directionScore,\r\n    finalScore,\r\n    directionChanges,\r\n    aspectRatio,\r\n    circRatio\r\n  });\r\n  \r\n  return finalScore;\r\n}\r\n\r\nfunction detectRectangle(points, width, height, pathLength) {\r\n  // Method 1: Direction changes (should be around 4 for rectangle)\r\n  let directionChanges = 0;\r\n  const directions = [];\r\n  \r\n  for (let i = 1; i < points.length; i++) {\r\n    const dx = points[i][0] - points[i-1][0];\r\n    const dy = points[i][1] - points[i-1][1];\r\n    if (Math.abs(dx) > 0.5 || Math.abs(dy) > 0.5) {\r\n      directions.push(Math.atan2(dy, dx));\r\n    }\r\n  }\r\n  \r\n  for (let i = 1; i < directions.length; i++) {\r\n    const angleDiff = Math.abs(directions[i] - directions[i-1]);\r\n    if (angleDiff > Math.PI/6) directionChanges++;\r\n  }\r\n  \r\n  // Method 2: Expected vs actual perimeter\r\n  const expectedPerim = 2 * (width + height);\r\n  const perimRatio = pathLength / expectedPerim;\r\n  const perimScore = 1 - Math.abs(perimRatio - 1);\r\n  \r\n  // Method 3: Aspect ratio (rectangles can be any ratio, but not too extreme)\r\n  const aspectRatio = Math.min(width, height) / Math.max(width, height);\r\n  \r\n  // Method 4: Straight line detection\r\n  let straightLines = 0;\r\n  for (let i = 2; i < points.length; i++) {\r\n    const p1 = points[i-2];\r\n    const p2 = points[i-1];\r\n    const p3 = points[i];\r\n    \r\n    const angle1 = Math.atan2(p2[1] - p1[1], p2[0] - p1[0]);\r\n    const angle2 = Math.atan2(p3[1] - p2[1], p3[0] - p2[0]);\r\n    const angleDiff = Math.abs(angle1 - angle2);\r\n    \r\n    if (angleDiff < Math.PI/12) straightLines++;\r\n  }\r\n  \r\n  const straightLineScore = Math.min(straightLines / points.length, 1);\r\n  \r\n  // Method 5: Corner detection (should have 4 distinct corners)\r\n  const cornerScore = 1 - Math.abs(directionChanges - 4) / 4;\r\n  \r\n  // Combine scores\r\n  const finalScore = (\r\n    cornerScore * 0.4 + \r\n    perimScore * 0.3 + \r\n    straightLineScore * 0.2 + \r\n    aspectRatio * 0.1\r\n  );\r\n  \r\n  console.log('Rectangle Detection:', {\r\n    directionChanges,\r\n    cornerScore,\r\n    perimScore,\r\n    straightLineScore,\r\n    aspectRatio,\r\n    finalScore\r\n  });\r\n  \r\n  return finalScore;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}