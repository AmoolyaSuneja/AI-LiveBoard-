{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amoolya Suneja\\\\Desktop\\\\AI-Liveboard\\\\client\\\\src\\\\components\\\\whiteboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useContext, useState, forwardRef, useImperativeHandle } from 'react';\nimport { Stage, Layer, Line, Circle, Rect } from 'react-konva';\nimport { SHAPES, EVENTS } from '../utils/constants';\nimport useDrawing from '../hooks/useDrawing';\nimport { SocketContext } from '../context/SocketContext';\nimport { recognizeShape } from '../utils/shapeRecognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Whiteboard = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  roomId,\n  users,\n  onErase\n}, ref) => {\n  _s();\n  const socket = useContext(SocketContext);\n  const stageRef = useRef(null);\n  const [debugInfo, setDebugInfo] = useState(\"\");\n  const [stageSize, setStageSize] = useState({\n    width: 800,\n    height: 600\n  });\n  const {\n    elements,\n    setElements,\n    isDrawing,\n    handleDrawStart,\n    handleDrawMove,\n    handleDrawEnd\n  } = useDrawing(socket, roomId);\n\n  // Expose methods to parent component\n  useImperativeHandle(ref, () => ({\n    handleErase: () => {\n      setElements([]);\n      socket.emit(EVENTS.CLEAR_BOARD, {\n        roomId\n      });\n      setDebugInfo(\"Board cleared\");\n    }\n  }));\n\n  // Update stage size on mount and window resize\n  useEffect(() => {\n    const updateStageSize = () => {\n      var _stageRef$current;\n      const container = (_stageRef$current = stageRef.current) === null || _stageRef$current === void 0 ? void 0 : _stageRef$current.container();\n      if (container) {\n        const rect = container.getBoundingClientRect();\n        setStageSize({\n          width: rect.width,\n          height: rect.height\n        });\n      }\n    };\n    updateStageSize();\n    window.addEventListener('resize', updateStageSize);\n    return () => window.removeEventListener('resize', updateStageSize);\n  }, []);\n\n  // Handle erase\n  const handleErase = () => {\n    setElements([]);\n    socket.emit(EVENTS.CLEAR_BOARD, {\n      roomId\n    });\n    setDebugInfo(\"Board cleared\");\n  };\n\n  // Socket listeners\n  useEffect(() => {\n    const handleRemoteDrawStart = element => {\n      setElements(prev => [...prev, element]);\n    };\n    const handleRemoteDrawMove = point => {\n      setElements(prev => {\n        if (prev.length === 0) return prev;\n        const lastIndex = prev.length - 1;\n        const updated = [...prev];\n        updated[lastIndex] = {\n          ...updated[lastIndex],\n          points: [...updated[lastIndex].points, point]\n        };\n        return updated;\n      });\n    };\n    const handleShapeRecognized = shape => {\n      setElements(prev => [...prev, {\n        ...shape,\n        id: Date.now()\n      }]);\n      setDebugInfo(`Shape corrected: ${shape.type}`);\n    };\n    const handleClearBoard = () => {\n      setElements([]);\n      setDebugInfo(\"Board cleared by another user\");\n    };\n    socket.on(EVENTS.DRAW_START, handleRemoteDrawStart);\n    socket.on(EVENTS.DRAW_MOVE, handleRemoteDrawMove);\n    socket.on(EVENTS.SHAPE_RECOGNIZED, handleShapeRecognized);\n    socket.on(EVENTS.CLEAR_BOARD, handleClearBoard);\n    return () => {\n      socket.off(EVENTS.DRAW_START, handleRemoteDrawStart);\n      socket.off(EVENTS.DRAW_MOVE, handleRemoteDrawMove);\n      socket.off(EVENTS.SHAPE_RECOGNIZED, handleShapeRecognized);\n      socket.off(EVENTS.CLEAR_BOARD, handleClearBoard);\n    };\n  }, [setElements, socket]);\n\n  // Drawing events\n  const handleMouseDown = e => {\n    const stage = e.target.getStage();\n    const pos = stage.getPointerPosition();\n    handleDrawStart(pos.x, pos.y);\n    setDebugInfo(\"Drawing started...\");\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) return;\n    const stage = e.target.getStage();\n    const pos = stage.getPointerPosition();\n    handleDrawMove(pos.x, pos.y);\n  };\n  const handleMouseUp = () => {\n    if (!isDrawing) return;\n    handleDrawEnd();\n    if (elements.length === 0) return;\n    const lastElement = elements[elements.length - 1];\n    if (lastElement.type === SHAPES.FREEHAND && lastElement.points.length >= 6) {\n      try {\n        console.log(\"Attempting shape recognition with points:\", lastElement.points.length);\n        const recognized = recognizeShape(lastElement.points);\n        console.log(\"Recognition result:\", recognized);\n        if (recognized) {\n          console.log(`Recognized as ${recognized.type}`);\n\n          // Replace the original drawing with the corrected shape\n          setElements(prev => {\n            const newElements = [...prev];\n            // Remove the last freehand element\n            newElements.pop();\n            // Add the corrected shape\n            newElements.push({\n              ...recognized,\n              id: Date.now()\n            });\n            return newElements;\n          });\n\n          // Emit to other users\n          socket.emit(EVENTS.SHAPE_RECOGNIZED, {\n            roomId,\n            shape: {\n              ...recognized,\n              id: Date.now()\n            }\n          });\n          setDebugInfo(`Shape corrected: ${recognized.type}`);\n        } else {\n          console.log(\"No shape recognized - keeping as freehand\");\n          setDebugInfo(\"No shape recognized\");\n        }\n      } catch (error) {\n        console.error(\"Recognition error:\", error);\n        setDebugInfo(`Recognition error: ${error.message}`);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whiteboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-info\",\n      children: debugInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stage, {\n      width: stageSize.width,\n      height: stageSize.height,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      ref: stageRef,\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: elements.map(element => {\n          if (element.type === SHAPES.FREEHAND) {\n            return /*#__PURE__*/_jsxDEV(Line, {\n              points: element.points.flat(),\n              stroke: \"#000\",\n              strokeWidth: 3,\n              tension: 0.5,\n              lineCap: \"round\",\n              lineJoin: \"round\"\n            }, element.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }, this);\n          }\n          if (element.type === SHAPES.CIRCLE) {\n            return /*#__PURE__*/_jsxDEV(Circle, {\n              x: element.x + element.radius,\n              y: element.y + element.radius,\n              radius: element.radius,\n              stroke: \"#000\",\n              strokeWidth: 3\n            }, element.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this);\n          }\n          if (element.type === SHAPES.RECTANGLE) {\n            return /*#__PURE__*/_jsxDEV(Rect, {\n              x: element.x,\n              y: element.y,\n              width: element.width,\n              height: element.height,\n              stroke: \"#000\",\n              strokeWidth: 3\n            }, element.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this);\n          }\n          return null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}, \"rCYdxhtIt5eYtTksfzjxaQBVHdo=\", false, function () {\n  return [useDrawing];\n})), \"rCYdxhtIt5eYtTksfzjxaQBVHdo=\", false, function () {\n  return [useDrawing];\n});\n_c2 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Whiteboard$forwardRef\");\n$RefreshReg$(_c2, \"Whiteboard\");","map":{"version":3,"names":["React","useRef","useEffect","useContext","useState","forwardRef","useImperativeHandle","Stage","Layer","Line","Circle","Rect","SHAPES","EVENTS","useDrawing","SocketContext","recognizeShape","jsxDEV","_jsxDEV","Whiteboard","_s","_c","roomId","users","onErase","ref","socket","stageRef","debugInfo","setDebugInfo","stageSize","setStageSize","width","height","elements","setElements","isDrawing","handleDrawStart","handleDrawMove","handleDrawEnd","handleErase","emit","CLEAR_BOARD","updateStageSize","_stageRef$current","container","current","rect","getBoundingClientRect","window","addEventListener","removeEventListener","handleRemoteDrawStart","element","prev","handleRemoteDrawMove","point","length","lastIndex","updated","points","handleShapeRecognized","shape","id","Date","now","type","handleClearBoard","on","DRAW_START","DRAW_MOVE","SHAPE_RECOGNIZED","off","handleMouseDown","e","stage","target","getStage","pos","getPointerPosition","x","y","handleMouseMove","handleMouseUp","lastElement","FREEHAND","console","log","recognized","newElements","pop","push","error","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","onMouseMove","onMouseUp","map","flat","stroke","strokeWidth","tension","lineCap","lineJoin","CIRCLE","radius","RECTANGLE","_c2","$RefreshReg$"],"sources":["C:/Users/Amoolya Suneja/Desktop/AI-Liveboard/client/src/components/whiteboard.jsx"],"sourcesContent":["import React, { useRef, useEffect, useContext, useState, forwardRef, useImperativeHandle } from 'react';\r\nimport { Stage, Layer, Line, Circle, Rect } from 'react-konva';\r\nimport { SHAPES, EVENTS } from '../utils/constants';\r\nimport useDrawing from '../hooks/useDrawing';\r\nimport { SocketContext } from '../context/SocketContext';\r\nimport { recognizeShape } from '../utils/shapeRecognition';\r\n\r\nconst Whiteboard = forwardRef(({ roomId, users, onErase }, ref) => {\r\n  const socket = useContext(SocketContext);\r\n  const stageRef = useRef(null);\r\n  const [debugInfo, setDebugInfo] = useState(\"\");\r\n  const [stageSize, setStageSize] = useState({ width: 800, height: 600 });\r\n  const {\r\n    elements,\r\n    setElements,\r\n    isDrawing,\r\n    handleDrawStart,\r\n    handleDrawMove,\r\n    handleDrawEnd\r\n  } = useDrawing(socket, roomId);\r\n\r\n  // Expose methods to parent component\r\n  useImperativeHandle(ref, () => ({\r\n    handleErase: () => {\r\n      setElements([]);\r\n      socket.emit(EVENTS.CLEAR_BOARD, { roomId });\r\n      setDebugInfo(\"Board cleared\");\r\n    }\r\n  }));\r\n\r\n  // Update stage size on mount and window resize\r\n  useEffect(() => {\r\n    const updateStageSize = () => {\r\n      const container = stageRef.current?.container();\r\n      if (container) {\r\n        const rect = container.getBoundingClientRect();\r\n        setStageSize({\r\n          width: rect.width,\r\n          height: rect.height\r\n        });\r\n      }\r\n    };\r\n\r\n    updateStageSize();\r\n    window.addEventListener('resize', updateStageSize);\r\n    return () => window.removeEventListener('resize', updateStageSize);\r\n  }, []);\r\n\r\n  // Handle erase\r\n  const handleErase = () => {\r\n    setElements([]);\r\n    socket.emit(EVENTS.CLEAR_BOARD, { roomId });\r\n    setDebugInfo(\"Board cleared\");\r\n  };\r\n\r\n  // Socket listeners\r\n  useEffect(() => {\r\n    const handleRemoteDrawStart = (element) => {\r\n      setElements(prev => [...prev, element]);\r\n    };\r\n\r\n    const handleRemoteDrawMove = (point) => {\r\n      setElements(prev => {\r\n        if (prev.length === 0) return prev;\r\n        const lastIndex = prev.length - 1;\r\n        const updated = [...prev];\r\n        updated[lastIndex] = {\r\n          ...updated[lastIndex],\r\n          points: [...updated[lastIndex].points, point]\r\n        };\r\n        return updated;\r\n      });\r\n    };\r\n\r\n    const handleShapeRecognized = (shape) => {\r\n      setElements(prev => [...prev, { ...shape, id: Date.now() }]);\r\n      setDebugInfo(`Shape corrected: ${shape.type}`);\r\n    };\r\n\r\n    const handleClearBoard = () => {\r\n      setElements([]);\r\n      setDebugInfo(\"Board cleared by another user\");\r\n    };\r\n\r\n    socket.on(EVENTS.DRAW_START, handleRemoteDrawStart);\r\n    socket.on(EVENTS.DRAW_MOVE, handleRemoteDrawMove);\r\n    socket.on(EVENTS.SHAPE_RECOGNIZED, handleShapeRecognized);\r\n    socket.on(EVENTS.CLEAR_BOARD, handleClearBoard);\r\n\r\n    return () => {\r\n      socket.off(EVENTS.DRAW_START, handleRemoteDrawStart);\r\n      socket.off(EVENTS.DRAW_MOVE, handleRemoteDrawMove);\r\n      socket.off(EVENTS.SHAPE_RECOGNIZED, handleShapeRecognized);\r\n      socket.off(EVENTS.CLEAR_BOARD, handleClearBoard);\r\n    };\r\n  }, [setElements, socket]);\r\n\r\n  // Drawing events\r\n  const handleMouseDown = (e) => {\r\n    const stage = e.target.getStage();\r\n    const pos = stage.getPointerPosition();\r\n    handleDrawStart(pos.x, pos.y);\r\n    setDebugInfo(\"Drawing started...\");\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDrawing) return;\r\n    const stage = e.target.getStage();\r\n    const pos = stage.getPointerPosition();\r\n    handleDrawMove(pos.x, pos.y);\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    if (!isDrawing) return;\r\n    handleDrawEnd();\r\n    \r\n    if (elements.length === 0) return;\r\n    \r\n    const lastElement = elements[elements.length - 1];\r\n    if (lastElement.type === SHAPES.FREEHAND && lastElement.points.length >= 6) {\r\n      try {\r\n        console.log(\"Attempting shape recognition with points:\", lastElement.points.length);\r\n        const recognized = recognizeShape(lastElement.points);\r\n        console.log(\"Recognition result:\", recognized);\r\n        \r\n        if (recognized) {\r\n          console.log(`Recognized as ${recognized.type}`);\r\n          \r\n          // Replace the original drawing with the corrected shape\r\n          setElements(prev => {\r\n            const newElements = [...prev];\r\n            // Remove the last freehand element\r\n            newElements.pop();\r\n            // Add the corrected shape\r\n            newElements.push({\r\n              ...recognized,\r\n              id: Date.now()\r\n            });\r\n            return newElements;\r\n          });\r\n          \r\n          // Emit to other users\r\n          socket.emit(EVENTS.SHAPE_RECOGNIZED, {\r\n            roomId,\r\n            shape: {\r\n              ...recognized,\r\n              id: Date.now()\r\n            }\r\n          });\r\n          \r\n          setDebugInfo(`Shape corrected: ${recognized.type}`);\r\n        } else {\r\n          console.log(\"No shape recognized - keeping as freehand\");\r\n          setDebugInfo(\"No shape recognized\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Recognition error:\", error);\r\n        setDebugInfo(`Recognition error: ${error.message}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"whiteboard\">\r\n      <div className=\"debug-info\">{debugInfo}</div>\r\n      \r\n      <Stage\r\n        width={stageSize.width}\r\n        height={stageSize.height}\r\n        onMouseDown={handleMouseDown}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={handleMouseUp}\r\n        ref={stageRef}\r\n      >\r\n        <Layer>\r\n          {elements.map((element) => {\r\n            if (element.type === SHAPES.FREEHAND) {\r\n              return (\r\n                <Line\r\n                  key={element.id}\r\n                  points={element.points.flat()}\r\n                  stroke=\"#000\"\r\n                  strokeWidth={3}\r\n                  tension={0.5}\r\n                  lineCap=\"round\"\r\n                  lineJoin=\"round\"\r\n                />\r\n              );\r\n            }\r\n            if (element.type === SHAPES.CIRCLE) {\r\n              return (\r\n                <Circle\r\n                  key={element.id}\r\n                  x={element.x + element.radius}\r\n                  y={element.y + element.radius}\r\n                  radius={element.radius}\r\n                  stroke=\"#000\"\r\n                  strokeWidth={3}\r\n                />\r\n              );\r\n            }\r\n            if (element.type === SHAPES.RECTANGLE) {\r\n              return (\r\n                <Rect\r\n                  key={element.id}\r\n                  x={element.x}\r\n                  y={element.y}\r\n                  width={element.width}\r\n                  height={element.height}\r\n                  stroke=\"#000\"\r\n                  strokeWidth={3}\r\n                />\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </Layer>\r\n      </Stage>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Whiteboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}