{"ast":null,"code":"export function recognizeShape(points) {\n  if (!points || points.length < 6) return null; // Even more lenient minimum points\n\n  // Calculate bounding box\n  const xs = points.map(p => p[0]);\n  const ys = points.map(p => p[1]);\n  const minX = Math.min(...xs);\n  const maxX = Math.max(...xs);\n  const minY = Math.min(...ys);\n  const maxY = Math.max(...ys);\n  const width = maxX - minX;\n  const height = maxY - minY;\n  const centerX = (minX + maxX) / 2;\n  const centerY = (minY + maxY) / 2;\n\n  // Skip very small shapes (likely accidental marks)\n  if (width < 20 || height < 20) return null;\n\n  // Calculate path length\n  let pathLength = 0;\n  for (let i = 1; i < points.length; i++) {\n    pathLength += Math.hypot(points[i][0] - points[i - 1][0], points[i][1] - points[i - 1][1]);\n  }\n\n  // Calculate shape closure (very lenient for meeting drawings)\n  const startEndDist = Math.hypot(points[0][0] - points[points.length - 1][0], points[0][1] - points[points.length - 1][1]);\n  const isClosedShape = startEndDist < Math.min(width, height) * 0.6; // Very lenient for meetings\n\n  // Calculate scores\n  const circleScore = calculateCircleScore(points, centerX, centerY, width, height, pathLength);\n  const rectScore = calculateRectangleScore(points, width, height, pathLength);\n  console.log('Shape Analysis:', {\n    points: points.length,\n    width,\n    height,\n    startEndDist,\n    isClosedShape,\n    circleScore,\n    rectScore,\n    aspectRatio: Math.min(width, height) / Math.max(width, height)\n  });\n\n  // More balanced thresholds and better comparison logic\n  const threshold = 0.4;\n\n  // Only recognize if one shape is clearly better than the other\n  if (circleScore > threshold && circleScore > rectScore + 0.1) {\n    const radius = Math.min(width, height) / 2;\n    return {\n      type: 'circle',\n      x: centerX - radius,\n      y: centerY - radius,\n      radius: radius\n    };\n  }\n  if (rectScore > threshold && rectScore > circleScore + 0.1) {\n    return {\n      type: 'rectangle',\n      x: minX,\n      y: minY,\n      width: width,\n      height: height\n    };\n  }\n  return null;\n}\nfunction calculateCircleScore(points, centerX, centerY, width, height, pathLength) {\n  // Calculate average distance from center\n  let totalDist = 0;\n  points.forEach(point => {\n    totalDist += Math.hypot(point[0] - centerX, point[1] - centerY);\n  });\n  const avgDist = totalDist / points.length;\n\n  // Calculate variance (lower is better for circles)\n  let variance = 0;\n  points.forEach(point => {\n    variance += Math.pow(Math.hypot(point[0] - centerX, point[1] - centerY) - avgDist, 2);\n  });\n  variance = variance / points.length;\n\n  // Expected circumference\n  const radius = Math.min(width, height) / 2;\n  const expectedCirc = 2 * Math.PI * radius;\n\n  // Aspect ratio (1 = perfect circle)\n  const aspectRatio = Math.min(width, height) / Math.max(width, height);\n\n  // Combine factors with balanced weights\n  const varianceScore = 1 - Math.min(variance / (radius * radius * 2), 1);\n  const circScore = 1 - Math.abs(pathLength - expectedCirc) / expectedCirc;\n  const aspectScore = aspectRatio;\n  const finalScore = varianceScore * 0.4 + circScore * 0.4 + aspectScore * 0.2;\n  console.log('Circle Score Components:', {\n    varianceScore,\n    circScore,\n    aspectScore,\n    finalScore\n  });\n  return finalScore;\n}\nfunction calculateRectangleScore(points, width, height, pathLength) {\n  // Count direction changes (should be around 4 for rectangle)\n  let dirChanges = 0;\n  const directions = [];\n  for (let i = 1; i < points.length; i++) {\n    const dx = points[i][0] - points[i - 1][0];\n    const dy = points[i][1] - points[i - 1][1];\n    if (Math.abs(dx) > 0.3 || Math.abs(dy) > 0.3) {\n      // Very lenient movement threshold\n      directions.push(Math.atan2(dy, dx));\n    }\n  }\n  for (let i = 1; i < directions.length; i++) {\n    const angleDiff = Math.abs(directions[i] - directions[i - 1]);\n    if (angleDiff > Math.PI / 8) dirChanges++; // More reasonable angle change detection\n  }\n\n  // Expected perimeter\n  const expectedPerim = 2 * (width + height);\n  const perimScore = 1 - Math.abs(pathLength - expectedPerim) / expectedPerim;\n\n  // Angle change score (should be around 4 changes)\n  const changeScore = 1 - Math.abs(dirChanges - 4) / 6;\n\n  // Aspect ratio score (penalize very thin rectangles)\n  const minSide = Math.min(width, height);\n  const maxSide = Math.max(width, height);\n  const aspectScore = minSide / maxSide;\n\n  // Additional rectangle-specific checks\n  const isRectangular = width > 0 && height > 0 && Math.abs(width - height) > 10; // Not square\n  const rectangularBonus = isRectangular ? 0.2 : 0;\n  const finalScore = perimScore * 0.3 + changeScore * 0.4 + aspectScore * 0.2 + rectangularBonus;\n  console.log('Rectangle Score Components:', {\n    dirChanges,\n    perimScore,\n    changeScore,\n    aspectScore,\n    rectangularBonus,\n    finalScore\n  });\n  return finalScore;\n}","map":{"version":3,"names":["recognizeShape","points","length","xs","map","p","ys","minX","Math","min","maxX","max","minY","maxY","width","height","centerX","centerY","pathLength","i","hypot","startEndDist","isClosedShape","circleScore","calculateCircleScore","rectScore","calculateRectangleScore","console","log","aspectRatio","threshold","radius","type","x","y","totalDist","forEach","point","avgDist","variance","pow","expectedCirc","PI","varianceScore","circScore","abs","aspectScore","finalScore","dirChanges","directions","dx","dy","push","atan2","angleDiff","expectedPerim","perimScore","changeScore","minSide","maxSide","isRectangular","rectangularBonus"],"sources":["C:/Users/Amoolya Suneja/Desktop/AI-Liveboard/client/src/utils/shapeRecognition.js"],"sourcesContent":["export function recognizeShape(points) {\r\n  if (!points || points.length < 6) return null; // Even more lenient minimum points\r\n\r\n  // Calculate bounding box\r\n  const xs = points.map(p => p[0]);\r\n  const ys = points.map(p => p[1]);\r\n  const minX = Math.min(...xs);\r\n  const maxX = Math.max(...xs);\r\n  const minY = Math.min(...ys);\r\n  const maxY = Math.max(...ys);\r\n  const width = maxX - minX;\r\n  const height = maxY - minY;\r\n  const centerX = (minX + maxX) / 2;\r\n  const centerY = (minY + maxY) / 2;\r\n\r\n  // Skip very small shapes (likely accidental marks)\r\n  if (width < 20 || height < 20) return null;\r\n\r\n  // Calculate path length\r\n  let pathLength = 0;\r\n  for (let i = 1; i < points.length; i++) {\r\n    pathLength += Math.hypot(\r\n      points[i][0] - points[i-1][0],\r\n      points[i][1] - points[i-1][1]\r\n    );\r\n  }\r\n\r\n  // Calculate shape closure (very lenient for meeting drawings)\r\n  const startEndDist = Math.hypot(\r\n    points[0][0] - points[points.length-1][0],\r\n    points[0][1] - points[points.length-1][1]\r\n  );\r\n  const isClosedShape = startEndDist < Math.min(width, height) * 0.6; // Very lenient for meetings\r\n\r\n  // Calculate scores\r\n  const circleScore = calculateCircleScore(points, centerX, centerY, width, height, pathLength);\r\n  const rectScore = calculateRectangleScore(points, width, height, pathLength);\r\n\r\n  console.log('Shape Analysis:', {\r\n    points: points.length,\r\n    width,\r\n    height,\r\n    startEndDist,\r\n    isClosedShape,\r\n    circleScore,\r\n    rectScore,\r\n    aspectRatio: Math.min(width, height) / Math.max(width, height)\r\n  });\r\n\r\n  // More balanced thresholds and better comparison logic\r\n  const threshold = 0.4;\r\n  \r\n  // Only recognize if one shape is clearly better than the other\r\n  if (circleScore > threshold && circleScore > rectScore + 0.1) {\r\n    const radius = Math.min(width, height) / 2;\r\n    return {\r\n      type: 'circle',\r\n      x: centerX - radius,\r\n      y: centerY - radius,\r\n      radius: radius\r\n    };\r\n  }\r\n  \r\n  if (rectScore > threshold && rectScore > circleScore + 0.1) {\r\n    return {\r\n      type: 'rectangle',\r\n      x: minX,\r\n      y: minY,\r\n      width: width,\r\n      height: height\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction calculateCircleScore(points, centerX, centerY, width, height, pathLength) {\r\n  // Calculate average distance from center\r\n  let totalDist = 0;\r\n  points.forEach(point => {\r\n    totalDist += Math.hypot(point[0] - centerX, point[1] - centerY);\r\n  });\r\n  const avgDist = totalDist / points.length;\r\n\r\n  // Calculate variance (lower is better for circles)\r\n  let variance = 0;\r\n  points.forEach(point => {\r\n    variance += Math.pow(Math.hypot(point[0] - centerX, point[1] - centerY) - avgDist, 2);\r\n  });\r\n  variance = variance / points.length;\r\n\r\n  // Expected circumference\r\n  const radius = Math.min(width, height) / 2;\r\n  const expectedCirc = 2 * Math.PI * radius;\r\n  \r\n  // Aspect ratio (1 = perfect circle)\r\n  const aspectRatio = Math.min(width, height) / Math.max(width, height);\r\n\r\n  // Combine factors with balanced weights\r\n  const varianceScore = 1 - Math.min(variance / (radius * radius * 2), 1);\r\n  const circScore = 1 - Math.abs(pathLength - expectedCirc) / expectedCirc;\r\n  const aspectScore = aspectRatio;\r\n\r\n  const finalScore = (varianceScore * 0.4 + circScore * 0.4 + aspectScore * 0.2);\r\n  \r\n  console.log('Circle Score Components:', {\r\n    varianceScore,\r\n    circScore,\r\n    aspectScore,\r\n    finalScore\r\n  });\r\n\r\n  return finalScore;\r\n}\r\n\r\nfunction calculateRectangleScore(points, width, height, pathLength) {\r\n  // Count direction changes (should be around 4 for rectangle)\r\n  let dirChanges = 0;\r\n  const directions = [];\r\n  \r\n  for (let i = 1; i < points.length; i++) {\r\n    const dx = points[i][0] - points[i-1][0];\r\n    const dy = points[i][1] - points[i-1][1];\r\n    if (Math.abs(dx) > 0.3 || Math.abs(dy) > 0.3) { // Very lenient movement threshold\r\n      directions.push(Math.atan2(dy, dx));\r\n    }\r\n  }\r\n\r\n  for (let i = 1; i < directions.length; i++) {\r\n    const angleDiff = Math.abs(directions[i] - directions[i-1]);\r\n    if (angleDiff > Math.PI/8) dirChanges++; // More reasonable angle change detection\r\n  }\r\n\r\n  // Expected perimeter\r\n  const expectedPerim = 2 * (width + height);\r\n  const perimScore = 1 - Math.abs(pathLength - expectedPerim) / expectedPerim;\r\n\r\n  // Angle change score (should be around 4 changes)\r\n  const changeScore = 1 - Math.abs(dirChanges - 4) / 6;\r\n\r\n  // Aspect ratio score (penalize very thin rectangles)\r\n  const minSide = Math.min(width, height);\r\n  const maxSide = Math.max(width, height);\r\n  const aspectScore = minSide / maxSide;\r\n\r\n  // Additional rectangle-specific checks\r\n  const isRectangular = width > 0 && height > 0 && Math.abs(width - height) > 10; // Not square\r\n  const rectangularBonus = isRectangular ? 0.2 : 0;\r\n\r\n  const finalScore = (perimScore * 0.3 + changeScore * 0.4 + aspectScore * 0.2 + rectangularBonus);\r\n  \r\n  console.log('Rectangle Score Components:', {\r\n    dirChanges,\r\n    perimScore,\r\n    changeScore,\r\n    aspectScore,\r\n    rectangularBonus,\r\n    finalScore\r\n  });\r\n\r\n  return finalScore;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}