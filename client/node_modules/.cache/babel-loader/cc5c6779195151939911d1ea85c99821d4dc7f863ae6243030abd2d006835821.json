{"ast":null,"code":"export function recognizeShape(points) {\n  if (!points || points.length < 10) return null;\n\n  // Calculate bounding box\n  const xs = points.map(p => p[0]);\n  const ys = points.map(p => p[1]);\n  const minX = Math.min(...xs);\n  const maxX = Math.max(...xs);\n  const minY = Math.min(...ys);\n  const maxY = Math.max(...ys);\n  const width = maxX - minX;\n  const height = maxY - minY;\n  const centerX = (minX + maxX) / 2;\n  const centerY = (minY + maxY) / 2;\n\n  // Calculate path length\n  let pathLength = 0;\n  for (let i = 1; i < points.length; i++) {\n    pathLength += Math.hypot(points[i][0] - points[i - 1][0], points[i][1] - points[i - 1][1]);\n  }\n\n  // Calculate shape closure (how close start/end points are)\n  const startEndDist = Math.hypot(points[0][0] - points[points.length - 1][0], points[0][1] - points[points.length - 1][1]);\n  const isClosedShape = startEndDist < 20;\n\n  // Only proceed if shape is closed\n  if (!isClosedShape) return null;\n\n  // Calculate scores\n  const circleScore = calculateCircleScore(points, centerX, centerY, width, height, pathLength);\n  const rectScore = calculateRectangleScore(points, width, height, pathLength);\n\n  // Determine shape with stricter conditions\n  if (circleScore > 0.8 && circleScore > rectScore) {\n    const radius = Math.min(width, height) / 2;\n    return {\n      type: 'circle',\n      x: centerX - radius,\n      y: centerY - radius,\n      radius: radius\n    };\n  }\n  if (rectScore > 0.8 && rectScore > circleScore) {\n    return {\n      type: 'rectangle',\n      x: minX,\n      y: minY,\n      width: width,\n      height: height\n    };\n  }\n  return null;\n}\nfunction calculateCircleScore(points, centerX, centerY, width, height, pathLength) {\n  // Calculate average distance from center\n  let totalDist = 0;\n  points.forEach(point => {\n    totalDist += Math.hypot(point[0] - centerX, point[1] - centerY);\n  });\n  const avgDist = totalDist / points.length;\n\n  // Calculate variance\n  let variance = 0;\n  points.forEach(point => {\n    variance += Math.pow(Math.hypot(point[0] - centerX, point[1] - centerY) - avgDist, 2);\n  });\n  variance = variance / points.length;\n\n  // Expected circumference\n  const radius = Math.min(width, height) / 2;\n  const expectedCirc = 2 * Math.PI * radius;\n\n  // Aspect ratio (1 = perfect circle)\n  const aspectRatio = Math.min(width, height) / Math.max(width, height);\n\n  // Combine factors\n  const varianceScore = 1 - Math.min(variance / (radius * 0.5), 1);\n  const circScore = 1 - Math.abs(pathLength - expectedCirc) / expectedCirc;\n  const aspectScore = aspectRatio;\n  return varianceScore * 0.5 + circScore * 0.3 + aspectScore * 0.2;\n}\nfunction calculateRectangleScore(points, width, height, pathLength) {\n  // Count direction changes (should be 4 for rectangle)\n  let dirChanges = 0;\n  const directions = [];\n  for (let i = 1; i < points.length; i++) {\n    const dx = points[i][0] - points[i - 1][0];\n    const dy = points[i][1] - points[i - 1][1];\n    directions.push(Math.atan2(dy, dx));\n  }\n  for (let i = 1; i < directions.length; i++) {\n    const angleDiff = Math.abs(directions[i] - directions[i - 1]);\n    if (angleDiff > Math.PI / 4) dirChanges++;\n  }\n\n  // Expected perimeter\n  const expectedPerim = 2 * (width + height);\n  const perimScore = 1 - Math.abs(pathLength - expectedPerim) / expectedPerim;\n\n  // Angle change score (should be about 4 changes)\n  const changeScore = 1 - Math.abs(dirChanges - 4) / 4;\n\n  // Aspect ratio score (penalize very thin rectangles)\n  const minSide = Math.min(width, height);\n  const maxSide = Math.max(width, height);\n  const aspectScore = minSide / maxSide;\n  return perimScore * 0.4 + changeScore * 0.4 + aspectScore * 0.2;\n}","map":{"version":3,"names":["recognizeShape","points","length","xs","map","p","ys","minX","Math","min","maxX","max","minY","maxY","width","height","centerX","centerY","pathLength","i","hypot","startEndDist","isClosedShape","circleScore","calculateCircleScore","rectScore","calculateRectangleScore","radius","type","x","y","totalDist","forEach","point","avgDist","variance","pow","expectedCirc","PI","aspectRatio","varianceScore","circScore","abs","aspectScore","dirChanges","directions","dx","dy","push","atan2","angleDiff","expectedPerim","perimScore","changeScore","minSide","maxSide"],"sources":["C:/Users/Amoolya Suneja/Desktop/AI-Liveboard/client/src/utils/shapeRecognition.js"],"sourcesContent":["export function recognizeShape(points) {\r\n  if (!points || points.length < 10) return null;\r\n\r\n  // Calculate bounding box\r\n  const xs = points.map(p => p[0]);\r\n  const ys = points.map(p => p[1]);\r\n  const minX = Math.min(...xs);\r\n  const maxX = Math.max(...xs);\r\n  const minY = Math.min(...ys);\r\n  const maxY = Math.max(...ys);\r\n  const width = maxX - minX;\r\n  const height = maxY - minY;\r\n  const centerX = (minX + maxX) / 2;\r\n  const centerY = (minY + maxY) / 2;\r\n\r\n  // Calculate path length\r\n  let pathLength = 0;\r\n  for (let i = 1; i < points.length; i++) {\r\n    pathLength += Math.hypot(\r\n      points[i][0] - points[i-1][0],\r\n      points[i][1] - points[i-1][1]\r\n    );\r\n  }\r\n\r\n  // Calculate shape closure (how close start/end points are)\r\n  const startEndDist = Math.hypot(\r\n    points[0][0] - points[points.length-1][0],\r\n    points[0][1] - points[points.length-1][1]\r\n  );\r\n  const isClosedShape = startEndDist < 20;\r\n\r\n  // Only proceed if shape is closed\r\n  if (!isClosedShape) return null;\r\n\r\n  // Calculate scores\r\n  const circleScore = calculateCircleScore(points, centerX, centerY, width, height, pathLength);\r\n  const rectScore = calculateRectangleScore(points, width, height, pathLength);\r\n\r\n  // Determine shape with stricter conditions\r\n  if (circleScore > 0.8 && circleScore > rectScore) {\r\n    const radius = Math.min(width, height) / 2;\r\n    return {\r\n      type: 'circle',\r\n      x: centerX - radius,\r\n      y: centerY - radius,\r\n      radius: radius\r\n    };\r\n  }\r\n  \r\n  if (rectScore > 0.8 && rectScore > circleScore) {\r\n    return {\r\n      type: 'rectangle',\r\n      x: minX,\r\n      y: minY,\r\n      width: width,\r\n      height: height\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction calculateCircleScore(points, centerX, centerY, width, height, pathLength) {\r\n  // Calculate average distance from center\r\n  let totalDist = 0;\r\n  points.forEach(point => {\r\n    totalDist += Math.hypot(point[0] - centerX, point[1] - centerY);\r\n  });\r\n  const avgDist = totalDist / points.length;\r\n\r\n  // Calculate variance\r\n  let variance = 0;\r\n  points.forEach(point => {\r\n    variance += Math.pow(Math.hypot(point[0] - centerX, point[1] - centerY) - avgDist, 2);\r\n  });\r\n  variance = variance / points.length;\r\n\r\n  // Expected circumference\r\n  const radius = Math.min(width, height) / 2;\r\n  const expectedCirc = 2 * Math.PI * radius;\r\n  \r\n  // Aspect ratio (1 = perfect circle)\r\n  const aspectRatio = Math.min(width, height) / Math.max(width, height);\r\n\r\n  // Combine factors\r\n  const varianceScore = 1 - Math.min(variance / (radius * 0.5), 1);\r\n  const circScore = 1 - Math.abs(pathLength - expectedCirc) / expectedCirc;\r\n  const aspectScore = aspectRatio;\r\n\r\n  return (varianceScore * 0.5 + circScore * 0.3 + aspectScore * 0.2);\r\n}\r\n\r\nfunction calculateRectangleScore(points, width, height, pathLength) {\r\n  // Count direction changes (should be 4 for rectangle)\r\n  let dirChanges = 0;\r\n  const directions = [];\r\n  \r\n  for (let i = 1; i < points.length; i++) {\r\n    const dx = points[i][0] - points[i-1][0];\r\n    const dy = points[i][1] - points[i-1][1];\r\n    directions.push(Math.atan2(dy, dx));\r\n  }\r\n\r\n  for (let i = 1; i < directions.length; i++) {\r\n    const angleDiff = Math.abs(directions[i] - directions[i-1]);\r\n    if (angleDiff > Math.PI/4) dirChanges++;\r\n  }\r\n\r\n  // Expected perimeter\r\n  const expectedPerim = 2 * (width + height);\r\n  const perimScore = 1 - Math.abs(pathLength - expectedPerim) / expectedPerim;\r\n\r\n  // Angle change score (should be about 4 changes)\r\n  const changeScore = 1 - Math.abs(dirChanges - 4) / 4;\r\n\r\n  // Aspect ratio score (penalize very thin rectangles)\r\n  const minSide = Math.min(width, height);\r\n  const maxSide = Math.max(width, height);\r\n  const aspectScore = minSide / maxSide;\r\n\r\n  return (perimScore * 0.4 + changeScore * 0.4 + aspectScore * 0.2);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}