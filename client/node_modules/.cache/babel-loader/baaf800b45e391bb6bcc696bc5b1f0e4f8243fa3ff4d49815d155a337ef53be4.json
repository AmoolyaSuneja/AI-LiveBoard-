{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amoolya Suneja\\\\Desktop\\\\AI-Liveboard\\\\client\\\\src\\\\components\\\\whiteboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useContext, useState } from 'react';\nimport { Stage, Layer, Line, Circle, Rect } from 'react-konva';\nimport { SHAPES, EVENTS } from '../utils/constants';\nimport useDrawing from '../hooks/useDrawing';\nimport { SocketContext } from '../context/SocketContext';\nimport { recognizeShape } from '../utils/shapeRecognition';\nimport Notification from './Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Whiteboard = ({\n  roomId,\n  users\n}) => {\n  _s();\n  const socket = useContext(SocketContext);\n  const stageRef = useRef(null);\n  const [debugInfo, setDebugInfo] = useState(\"\");\n  const [stageSize, setStageSize] = useState({\n    width: 800,\n    height: 600\n  });\n  const [notifications, setNotifications] = useState([]);\n  const {\n    elements,\n    setElements,\n    isDrawing,\n    handleDrawStart,\n    handleDrawMove,\n    handleDrawEnd\n  } = useDrawing(socket, roomId);\n\n  // Update stage size on mount and window resize\n  useEffect(() => {\n    const updateStageSize = () => {\n      var _stageRef$current;\n      const container = (_stageRef$current = stageRef.current) === null || _stageRef$current === void 0 ? void 0 : _stageRef$current.container();\n      if (container) {\n        const rect = container.getBoundingClientRect();\n        setStageSize({\n          width: rect.width,\n          height: rect.height\n        });\n      }\n    };\n    updateStageSize();\n    window.addEventListener('resize', updateStageSize);\n    return () => window.removeEventListener('resize', updateStageSize);\n  }, []);\n\n  // Add notification helper\n  const addNotification = (message, type = 'success') => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, {\n      id,\n      message,\n      type\n    }]);\n  };\n\n  // Remove notification helper\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  // Socket listeners\n  useEffect(() => {\n    const handleRemoteDrawStart = element => {\n      setElements(prev => [...prev, element]);\n    };\n    const handleRemoteDrawMove = point => {\n      setElements(prev => {\n        if (prev.length === 0) return prev;\n        const lastIndex = prev.length - 1;\n        const updated = [...prev];\n        updated[lastIndex] = {\n          ...updated[lastIndex],\n          points: [...updated[lastIndex].points, point]\n        };\n        return updated;\n      });\n    };\n    const handleShapeRecognized = shape => {\n      setElements(prev => [...prev.filter(el => !el.temp), {\n        ...shape,\n        id: Date.now()\n      }]);\n      setDebugInfo(`Shape recognized: ${shape.type}`);\n      addNotification(`Shape recognized: ${shape.type}`, 'success');\n    };\n    socket.on(EVENTS.DRAW_START, handleRemoteDrawStart);\n    socket.on(EVENTS.DRAW_MOVE, handleRemoteDrawMove);\n    socket.on(EVENTS.SHAPE_RECOGNIZED, handleShapeRecognized);\n    return () => {\n      socket.off(EVENTS.DRAW_START, handleRemoteDrawStart);\n      socket.off(EVENTS.DRAW_MOVE, handleRemoteDrawMove);\n      socket.off(EVENTS.SHAPE_RECOGNIZED, handleShapeRecognized);\n    };\n  }, [setElements, socket]);\n\n  // Drawing events\n  const handleMouseDown = e => {\n    const stage = e.target.getStage();\n    const pos = stage.getPointerPosition();\n    handleDrawStart(pos.x, pos.y);\n    setDebugInfo(\"Drawing started...\");\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) return;\n    const stage = e.target.getStage();\n    const pos = stage.getPointerPosition();\n    handleDrawMove(pos.x, pos.y);\n  };\n  const handleMouseUp = () => {\n    if (!isDrawing) return;\n    handleDrawEnd();\n    if (elements.length === 0) return;\n    const lastElement = elements[elements.length - 1];\n    if (lastElement.type === SHAPES.FREEHAND && lastElement.points.length >= 8) {\n      try {\n        console.log(\"Attempting shape recognition with points:\", lastElement.points.length);\n        const recognized = recognizeShape(lastElement.points);\n        console.log(\"Recognition result:\", recognized);\n        if (recognized) {\n          console.log(`Recognized as ${recognized.type}`);\n          socket.emit(EVENTS.SHAPE_RECOGNIZED, {\n            roomId,\n            shape: {\n              ...recognized,\n              id: Date.now()\n            }\n          });\n\n          // Remove the temporary freehand drawing\n          setElements(prev => prev.filter(el => !el.temp));\n          addNotification(`Shape recognized: ${recognized.type}`, 'success');\n        } else {\n          console.log(\"No shape recognized - keeping as freehand\");\n          setDebugInfo(\"No shape recognized\");\n          addNotification(\"No shape recognized\", 'info');\n        }\n      } catch (error) {\n        console.error(\"Recognition error:\", error);\n        setDebugInfo(`Recognition error: ${error.message}`);\n        addNotification(\"Shape recognition failed\", 'error');\n      }\n    }\n  };\n\n  // Add temporary debug layer\n  const renderDebugLayer = () => {\n    if (!isDrawing || elements.length === 0) return null;\n    const lastElement = elements[elements.length - 1];\n    if (lastElement.type !== SHAPES.FREEHAND) return null;\n    return /*#__PURE__*/_jsxDEV(Layer, {\n      children: [lastElement.points.map((point, i) => /*#__PURE__*/_jsxDEV(Circle, {\n        x: point[0],\n        y: point[1],\n        radius: 2,\n        fill: \"red\",\n        opacity: 0.5\n      }, `point-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this)), lastElement.points.length > 10 && /*#__PURE__*/_jsxDEV(Rect, {\n        x: Math.min(...lastElement.points.map(p => p[0])),\n        y: Math.min(...lastElement.points.map(p => p[1])),\n        width: Math.max(...lastElement.points.map(p => p[0])) - Math.min(...lastElement.points.map(p => p[0])),\n        height: Math.max(...lastElement.points.map(p => p[1])) - Math.min(...lastElement.points.map(p => p[1])),\n        stroke: \"blue\",\n        strokeWidth: 1,\n        dash: [5, 5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whiteboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-info\",\n      children: debugInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), notifications.map(notification => /*#__PURE__*/_jsxDEV(Notification, {\n      message: notification.message,\n      type: notification.type,\n      onClose: () => removeNotification(notification.id)\n    }, notification.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Stage, {\n      width: stageSize.width,\n      height: stageSize.height,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      ref: stageRef,\n      children: [/*#__PURE__*/_jsxDEV(Layer, {\n        children: elements.map(element => {\n          if (element.type === SHAPES.FREEHAND) {\n            return /*#__PURE__*/_jsxDEV(Line, {\n              points: element.points.flat(),\n              stroke: \"#000\",\n              strokeWidth: 3,\n              tension: 0.5,\n              lineCap: \"round\",\n              lineJoin: \"round\"\n            }, element.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this);\n          }\n          if (element.type === SHAPES.CIRCLE) {\n            return /*#__PURE__*/_jsxDEV(Circle, {\n              x: element.x + element.radius,\n              y: element.y + element.radius,\n              radius: element.radius,\n              stroke: \"#000\",\n              strokeWidth: 3\n            }, element.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this);\n          }\n          if (element.type === SHAPES.RECTANGLE) {\n            return /*#__PURE__*/_jsxDEV(Rect, {\n              x: element.x,\n              y: element.y,\n              width: element.width,\n              height: element.height,\n              stroke: \"#000\",\n              strokeWidth: 3\n            }, element.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 17\n            }, this);\n          }\n          return null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), renderDebugLayer()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"y7zsm4GC394YRb21HGqJHveB3SE=\", false, function () {\n  return [useDrawing];\n});\n_c = Whiteboard;\nexport default Whiteboard;\nvar _c;\n$RefreshReg$(_c, \"Whiteboard\");","map":{"version":3,"names":["React","useRef","useEffect","useContext","useState","Stage","Layer","Line","Circle","Rect","SHAPES","EVENTS","useDrawing","SocketContext","recognizeShape","Notification","jsxDEV","_jsxDEV","Whiteboard","roomId","users","_s","socket","stageRef","debugInfo","setDebugInfo","stageSize","setStageSize","width","height","notifications","setNotifications","elements","setElements","isDrawing","handleDrawStart","handleDrawMove","handleDrawEnd","updateStageSize","_stageRef$current","container","current","rect","getBoundingClientRect","window","addEventListener","removeEventListener","addNotification","message","type","id","Date","now","prev","removeNotification","filter","n","handleRemoteDrawStart","element","handleRemoteDrawMove","point","length","lastIndex","updated","points","handleShapeRecognized","shape","el","temp","on","DRAW_START","DRAW_MOVE","SHAPE_RECOGNIZED","off","handleMouseDown","e","stage","target","getStage","pos","getPointerPosition","x","y","handleMouseMove","handleMouseUp","lastElement","FREEHAND","console","log","recognized","emit","error","renderDebugLayer","children","map","i","radius","fill","opacity","fileName","_jsxFileName","lineNumber","columnNumber","Math","min","p","max","stroke","strokeWidth","dash","className","notification","onClose","onMouseDown","onMouseMove","onMouseUp","ref","flat","tension","lineCap","lineJoin","CIRCLE","RECTANGLE","_c","$RefreshReg$"],"sources":["C:/Users/Amoolya Suneja/Desktop/AI-Liveboard/client/src/components/whiteboard.jsx"],"sourcesContent":["import React, { useRef, useEffect, useContext, useState } from 'react';\r\nimport { Stage, Layer, Line, Circle, Rect } from 'react-konva';\r\nimport { SHAPES, EVENTS } from '../utils/constants';\r\nimport useDrawing from '../hooks/useDrawing';\r\nimport { SocketContext } from '../context/SocketContext';\r\nimport { recognizeShape } from '../utils/shapeRecognition';\r\nimport Notification from './Notification';\r\n\r\nconst Whiteboard = ({ roomId, users }) => {\r\n  const socket = useContext(SocketContext);\r\n  const stageRef = useRef(null);\r\n  const [debugInfo, setDebugInfo] = useState(\"\");\r\n  const [stageSize, setStageSize] = useState({ width: 800, height: 600 });\r\n  const [notifications, setNotifications] = useState([]);\r\n  const {\r\n    elements,\r\n    setElements,\r\n    isDrawing,\r\n    handleDrawStart,\r\n    handleDrawMove,\r\n    handleDrawEnd\r\n  } = useDrawing(socket, roomId);\r\n\r\n  // Update stage size on mount and window resize\r\n  useEffect(() => {\r\n    const updateStageSize = () => {\r\n      const container = stageRef.current?.container();\r\n      if (container) {\r\n        const rect = container.getBoundingClientRect();\r\n        setStageSize({\r\n          width: rect.width,\r\n          height: rect.height\r\n        });\r\n      }\r\n    };\r\n\r\n    updateStageSize();\r\n    window.addEventListener('resize', updateStageSize);\r\n    return () => window.removeEventListener('resize', updateStageSize);\r\n  }, []);\r\n\r\n  // Add notification helper\r\n  const addNotification = (message, type = 'success') => {\r\n    const id = Date.now();\r\n    setNotifications(prev => [...prev, { id, message, type }]);\r\n  };\r\n\r\n  // Remove notification helper\r\n  const removeNotification = (id) => {\r\n    setNotifications(prev => prev.filter(n => n.id !== id));\r\n  };\r\n\r\n  // Socket listeners\r\n  useEffect(() => {\r\n    const handleRemoteDrawStart = (element) => {\r\n      setElements(prev => [...prev, element]);\r\n    };\r\n\r\n    const handleRemoteDrawMove = (point) => {\r\n      setElements(prev => {\r\n        if (prev.length === 0) return prev;\r\n        const lastIndex = prev.length - 1;\r\n        const updated = [...prev];\r\n        updated[lastIndex] = {\r\n          ...updated[lastIndex],\r\n          points: [...updated[lastIndex].points, point]\r\n        };\r\n        return updated;\r\n      });\r\n    };\r\n\r\n    const handleShapeRecognized = (shape) => {\r\n      setElements(prev => [\r\n        ...prev.filter(el => !el.temp),\r\n        { ...shape, id: Date.now() }\r\n      ]);\r\n      setDebugInfo(`Shape recognized: ${shape.type}`);\r\n      addNotification(`Shape recognized: ${shape.type}`, 'success');\r\n    };\r\n\r\n    socket.on(EVENTS.DRAW_START, handleRemoteDrawStart);\r\n    socket.on(EVENTS.DRAW_MOVE, handleRemoteDrawMove);\r\n    socket.on(EVENTS.SHAPE_RECOGNIZED, handleShapeRecognized);\r\n\r\n    return () => {\r\n      socket.off(EVENTS.DRAW_START, handleRemoteDrawStart);\r\n      socket.off(EVENTS.DRAW_MOVE, handleRemoteDrawMove);\r\n      socket.off(EVENTS.SHAPE_RECOGNIZED, handleShapeRecognized);\r\n    };\r\n  }, [setElements, socket]);\r\n\r\n  // Drawing events\r\n  const handleMouseDown = (e) => {\r\n    const stage = e.target.getStage();\r\n    const pos = stage.getPointerPosition();\r\n    handleDrawStart(pos.x, pos.y);\r\n    setDebugInfo(\"Drawing started...\");\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDrawing) return;\r\n    const stage = e.target.getStage();\r\n    const pos = stage.getPointerPosition();\r\n    handleDrawMove(pos.x, pos.y);\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    if (!isDrawing) return;\r\n    handleDrawEnd();\r\n    \r\n    if (elements.length === 0) return;\r\n    \r\n    const lastElement = elements[elements.length - 1];\r\n    if (lastElement.type === SHAPES.FREEHAND && lastElement.points.length >= 8) {\r\n      try {\r\n        console.log(\"Attempting shape recognition with points:\", lastElement.points.length);\r\n        const recognized = recognizeShape(lastElement.points);\r\n        console.log(\"Recognition result:\", recognized);\r\n        \r\n        if (recognized) {\r\n          console.log(`Recognized as ${recognized.type}`);\r\n          socket.emit(EVENTS.SHAPE_RECOGNIZED, {\r\n            roomId,\r\n            shape: {\r\n              ...recognized,\r\n              id: Date.now()\r\n            }\r\n          });\r\n          \r\n          // Remove the temporary freehand drawing\r\n          setElements(prev => prev.filter(el => !el.temp));\r\n          addNotification(`Shape recognized: ${recognized.type}`, 'success');\r\n        } else {\r\n          console.log(\"No shape recognized - keeping as freehand\");\r\n          setDebugInfo(\"No shape recognized\");\r\n          addNotification(\"No shape recognized\", 'info');\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Recognition error:\", error);\r\n        setDebugInfo(`Recognition error: ${error.message}`);\r\n        addNotification(\"Shape recognition failed\", 'error');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Add temporary debug layer\r\n  const renderDebugLayer = () => {\r\n    if (!isDrawing || elements.length === 0) return null;\r\n    \r\n    const lastElement = elements[elements.length - 1];\r\n    if (lastElement.type !== SHAPES.FREEHAND) return null;\r\n    \r\n    return (\r\n      <Layer>\r\n        {lastElement.points.map((point, i) => (\r\n          <Circle\r\n            key={`point-${i}`}\r\n            x={point[0]}\r\n            y={point[1]}\r\n            radius={2}\r\n            fill=\"red\"\r\n            opacity={0.5}\r\n          />\r\n        ))}\r\n        \r\n        {/* Bounding box */}\r\n        {lastElement.points.length > 10 && (\r\n          <Rect\r\n            x={Math.min(...lastElement.points.map(p => p[0]))}\r\n            y={Math.min(...lastElement.points.map(p => p[1]))}\r\n            width={\r\n              Math.max(...lastElement.points.map(p => p[0])) - \r\n              Math.min(...lastElement.points.map(p => p[0]))\r\n            }\r\n            height={\r\n              Math.max(...lastElement.points.map(p => p[1])) - \r\n              Math.min(...lastElement.points.map(p => p[1]))\r\n            }\r\n            stroke=\"blue\"\r\n            strokeWidth={1}\r\n            dash={[5, 5]}\r\n          />\r\n        )}\r\n      </Layer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"whiteboard\">\r\n      <div className=\"debug-info\">{debugInfo}</div>\r\n      \r\n      {/* Notifications */}\r\n      {notifications.map(notification => (\r\n        <Notification\r\n          key={notification.id}\r\n          message={notification.message}\r\n          type={notification.type}\r\n          onClose={() => removeNotification(notification.id)}\r\n        />\r\n      ))}\r\n      \r\n      <Stage\r\n        width={stageSize.width}\r\n        height={stageSize.height}\r\n        onMouseDown={handleMouseDown}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={handleMouseUp}\r\n        ref={stageRef}\r\n      >\r\n        <Layer>\r\n          {elements.map((element) => {\r\n            if (element.type === SHAPES.FREEHAND) {\r\n              return (\r\n                <Line\r\n                  key={element.id}\r\n                  points={element.points.flat()}\r\n                  stroke=\"#000\"\r\n                  strokeWidth={3}\r\n                  tension={0.5}\r\n                  lineCap=\"round\"\r\n                  lineJoin=\"round\"\r\n                />\r\n              );\r\n            }\r\n            if (element.type === SHAPES.CIRCLE) {\r\n              return (\r\n                <Circle\r\n                  key={element.id}\r\n                  x={element.x + element.radius}\r\n                  y={element.y + element.radius}\r\n                  radius={element.radius}\r\n                  stroke=\"#000\"\r\n                  strokeWidth={3}\r\n                />\r\n              );\r\n            }\r\n            if (element.type === SHAPES.RECTANGLE) {\r\n              return (\r\n                <Rect\r\n                  key={element.id}\r\n                  x={element.x}\r\n                  y={element.y}\r\n                  width={element.width}\r\n                  height={element.height}\r\n                  stroke=\"#000\"\r\n                  strokeWidth={3}\r\n                />\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </Layer>\r\n        \r\n        {renderDebugLayer()}\r\n      </Stage>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Whiteboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}