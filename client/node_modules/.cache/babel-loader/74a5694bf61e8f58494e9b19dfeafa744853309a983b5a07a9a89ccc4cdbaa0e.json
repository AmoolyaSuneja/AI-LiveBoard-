{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amoolya Suneja\\\\Desktop\\\\AI-Liveboard\\\\client\\\\src\\\\components\\\\whiteboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useContext, useState } from 'react';\nimport { Stage, Layer, Line, Circle, Rect } from 'react-konva';\nimport { SHAPES, EVENTS } from '../utils/constants';\nimport useDrawing from '../hooks/useDrawing';\nimport { SocketContext } from '../context/SocketContext';\nimport { recognizeShape } from '../utils/shapeRecognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Whiteboard = ({\n  roomId,\n  users\n}) => {\n  _s();\n  const socket = useContext(SocketContext);\n  const stageRef = useRef(null);\n  const [debugInfo, setDebugInfo] = useState(\"\");\n  const [stageSize, setStageSize] = useState({\n    width: 800,\n    height: 600\n  });\n  const {\n    elements,\n    setElements,\n    isDrawing,\n    handleDrawStart,\n    handleDrawMove,\n    handleDrawEnd\n  } = useDrawing(socket, roomId);\n\n  // Update stage size on mount and window resize\n  useEffect(() => {\n    const updateStageSize = () => {\n      var _stageRef$current;\n      const container = (_stageRef$current = stageRef.current) === null || _stageRef$current === void 0 ? void 0 : _stageRef$current.container();\n      if (container) {\n        const rect = container.getBoundingClientRect();\n        setStageSize({\n          width: rect.width,\n          height: rect.height\n        });\n      }\n    };\n    updateStageSize();\n    window.addEventListener('resize', updateStageSize);\n    return () => window.removeEventListener('resize', updateStageSize);\n  }, []);\n\n  // Socket listeners\n  useEffect(() => {\n    const handleRemoteDrawStart = element => {\n      setElements(prev => [...prev, element]);\n    };\n    const handleRemoteDrawMove = point => {\n      setElements(prev => {\n        if (prev.length === 0) return prev;\n        const lastIndex = prev.length - 1;\n        const updated = [...prev];\n        updated[lastIndex] = {\n          ...updated[lastIndex],\n          points: [...updated[lastIndex].points, point]\n        };\n        return updated;\n      });\n    };\n    const handleShapeRecognized = shape => {\n      setElements(prev => [...prev, {\n        ...shape,\n        id: Date.now()\n      }]);\n      setDebugInfo(`Shape corrected: ${shape.type}`);\n    };\n    socket.on(EVENTS.DRAW_START, handleRemoteDrawStart);\n    socket.on(EVENTS.DRAW_MOVE, handleRemoteDrawMove);\n    socket.on(EVENTS.SHAPE_RECOGNIZED, handleShapeRecognized);\n    return () => {\n      socket.off(EVENTS.DRAW_START, handleRemoteDrawStart);\n      socket.off(EVENTS.DRAW_MOVE, handleRemoteDrawMove);\n      socket.off(EVENTS.SHAPE_RECOGNIZED, handleShapeRecognized);\n    };\n  }, [setElements, socket]);\n\n  // Drawing events\n  const handleMouseDown = e => {\n    const stage = e.target.getStage();\n    const pos = stage.getPointerPosition();\n    handleDrawStart(pos.x, pos.y);\n    setDebugInfo(\"Drawing started...\");\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) return;\n    const stage = e.target.getStage();\n    const pos = stage.getPointerPosition();\n    handleDrawMove(pos.x, pos.y);\n  };\n  const handleMouseUp = () => {\n    if (!isDrawing) return;\n    handleDrawEnd();\n    if (elements.length === 0) return;\n    const lastElement = elements[elements.length - 1];\n    if (lastElement.type === SHAPES.FREEHAND && lastElement.points.length >= 8) {\n      try {\n        console.log(\"Attempting shape recognition with points:\", lastElement.points.length);\n        const recognized = recognizeShape(lastElement.points);\n        console.log(\"Recognition result:\", recognized);\n        if (recognized) {\n          console.log(`Recognized as ${recognized.type}`);\n          // Add the corrected shape alongside the original drawing\n          const correctedShape = {\n            ...recognized,\n            id: Date.now(),\n            isCorrected: true // Mark as AI-corrected shape\n          };\n          setElements(prev => [...prev, correctedShape]);\n\n          // Emit to other users\n          socket.emit(EVENTS.SHAPE_RECOGNIZED, {\n            roomId,\n            shape: correctedShape\n          });\n          setDebugInfo(`Shape corrected: ${recognized.type}`);\n        } else {\n          console.log(\"No shape recognized - keeping as freehand\");\n          setDebugInfo(\"No shape recognized\");\n        }\n      } catch (error) {\n        console.error(\"Recognition error:\", error);\n        setDebugInfo(`Recognition error: ${error.message}`);\n      }\n    }\n  };\n\n  // Add temporary debug layer\n  const renderDebugLayer = () => {\n    if (!isDrawing || elements.length === 0) return null;\n    const lastElement = elements[elements.length - 1];\n    if (lastElement.type !== SHAPES.FREEHAND) return null;\n    return /*#__PURE__*/_jsxDEV(Layer, {\n      children: [lastElement.points.map((point, i) => /*#__PURE__*/_jsxDEV(Circle, {\n        x: point[0],\n        y: point[1],\n        radius: 2,\n        fill: \"red\",\n        opacity: 0.5\n      }, `point-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this)), lastElement.points.length > 10 && /*#__PURE__*/_jsxDEV(Rect, {\n        x: Math.min(...lastElement.points.map(p => p[0])),\n        y: Math.min(...lastElement.points.map(p => p[1])),\n        width: Math.max(...lastElement.points.map(p => p[0])) - Math.min(...lastElement.points.map(p => p[0])),\n        height: Math.max(...lastElement.points.map(p => p[1])) - Math.min(...lastElement.points.map(p => p[1])),\n        stroke: \"blue\",\n        strokeWidth: 1,\n        dash: [5, 5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whiteboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-info\",\n      children: debugInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stage, {\n      width: stageSize.width,\n      height: stageSize.height,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      ref: stageRef,\n      children: [/*#__PURE__*/_jsxDEV(Layer, {\n        children: elements.map(element => {\n          if (element.type === SHAPES.FREEHAND) {\n            return /*#__PURE__*/_jsxDEV(Line, {\n              points: element.points.flat(),\n              stroke: \"#000\",\n              strokeWidth: 3,\n              tension: 0.5,\n              lineCap: \"round\",\n              lineJoin: \"round\",\n              opacity: 0.7 // Make original drawings slightly transparent\n            }, element.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this);\n          }\n          if (element.type === SHAPES.CIRCLE) {\n            return /*#__PURE__*/_jsxDEV(Circle, {\n              x: element.x + element.radius,\n              y: element.y + element.radius,\n              radius: element.radius,\n              stroke: element.isCorrected ? \"#667eea\" : \"#000\",\n              strokeWidth: element.isCorrected ? 4 : 3,\n              fill: element.isCorrected ? \"rgba(102, 126, 234, 0.1)\" : \"transparent\",\n              dash: element.isCorrected ? [5, 5] : []\n            }, element.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this);\n          }\n          if (element.type === SHAPES.RECTANGLE) {\n            return /*#__PURE__*/_jsxDEV(Rect, {\n              x: element.x,\n              y: element.y,\n              width: element.width,\n              height: element.height,\n              stroke: element.isCorrected ? \"#667eea\" : \"#000\",\n              strokeWidth: element.isCorrected ? 4 : 3,\n              fill: element.isCorrected ? \"rgba(102, 126, 234, 0.1)\" : \"transparent\",\n              dash: element.isCorrected ? [5, 5] : []\n            }, element.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 17\n            }, this);\n          }\n          return null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), renderDebugLayer()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"PJS2Kseag37j9mLPTJP27BQOiho=\", false, function () {\n  return [useDrawing];\n});\n_c = Whiteboard;\nexport default Whiteboard;\nvar _c;\n$RefreshReg$(_c, \"Whiteboard\");","map":{"version":3,"names":["React","useRef","useEffect","useContext","useState","Stage","Layer","Line","Circle","Rect","SHAPES","EVENTS","useDrawing","SocketContext","recognizeShape","jsxDEV","_jsxDEV","Whiteboard","roomId","users","_s","socket","stageRef","debugInfo","setDebugInfo","stageSize","setStageSize","width","height","elements","setElements","isDrawing","handleDrawStart","handleDrawMove","handleDrawEnd","updateStageSize","_stageRef$current","container","current","rect","getBoundingClientRect","window","addEventListener","removeEventListener","handleRemoteDrawStart","element","prev","handleRemoteDrawMove","point","length","lastIndex","updated","points","handleShapeRecognized","shape","id","Date","now","type","on","DRAW_START","DRAW_MOVE","SHAPE_RECOGNIZED","off","handleMouseDown","e","stage","target","getStage","pos","getPointerPosition","x","y","handleMouseMove","handleMouseUp","lastElement","FREEHAND","console","log","recognized","correctedShape","isCorrected","emit","error","message","renderDebugLayer","children","map","i","radius","fill","opacity","fileName","_jsxFileName","lineNumber","columnNumber","Math","min","p","max","stroke","strokeWidth","dash","className","onMouseDown","onMouseMove","onMouseUp","ref","flat","tension","lineCap","lineJoin","CIRCLE","RECTANGLE","_c","$RefreshReg$"],"sources":["C:/Users/Amoolya Suneja/Desktop/AI-Liveboard/client/src/components/whiteboard.jsx"],"sourcesContent":["import React, { useRef, useEffect, useContext, useState } from 'react';\r\nimport { Stage, Layer, Line, Circle, Rect } from 'react-konva';\r\nimport { SHAPES, EVENTS } from '../utils/constants';\r\nimport useDrawing from '../hooks/useDrawing';\r\nimport { SocketContext } from '../context/SocketContext';\r\nimport { recognizeShape } from '../utils/shapeRecognition';\r\n\r\nconst Whiteboard = ({ roomId, users }) => {\r\n  const socket = useContext(SocketContext);\r\n  const stageRef = useRef(null);\r\n  const [debugInfo, setDebugInfo] = useState(\"\");\r\n  const [stageSize, setStageSize] = useState({ width: 800, height: 600 });\r\n  const {\r\n    elements,\r\n    setElements,\r\n    isDrawing,\r\n    handleDrawStart,\r\n    handleDrawMove,\r\n    handleDrawEnd\r\n  } = useDrawing(socket, roomId);\r\n\r\n  // Update stage size on mount and window resize\r\n  useEffect(() => {\r\n    const updateStageSize = () => {\r\n      const container = stageRef.current?.container();\r\n      if (container) {\r\n        const rect = container.getBoundingClientRect();\r\n        setStageSize({\r\n          width: rect.width,\r\n          height: rect.height\r\n        });\r\n      }\r\n    };\r\n\r\n    updateStageSize();\r\n    window.addEventListener('resize', updateStageSize);\r\n    return () => window.removeEventListener('resize', updateStageSize);\r\n  }, []);\r\n\r\n  // Socket listeners\r\n  useEffect(() => {\r\n    const handleRemoteDrawStart = (element) => {\r\n      setElements(prev => [...prev, element]);\r\n    };\r\n\r\n    const handleRemoteDrawMove = (point) => {\r\n      setElements(prev => {\r\n        if (prev.length === 0) return prev;\r\n        const lastIndex = prev.length - 1;\r\n        const updated = [...prev];\r\n        updated[lastIndex] = {\r\n          ...updated[lastIndex],\r\n          points: [...updated[lastIndex].points, point]\r\n        };\r\n        return updated;\r\n      });\r\n    };\r\n\r\n    const handleShapeRecognized = (shape) => {\r\n      setElements(prev => [...prev, { ...shape, id: Date.now() }]);\r\n      setDebugInfo(`Shape corrected: ${shape.type}`);\r\n    };\r\n\r\n    socket.on(EVENTS.DRAW_START, handleRemoteDrawStart);\r\n    socket.on(EVENTS.DRAW_MOVE, handleRemoteDrawMove);\r\n    socket.on(EVENTS.SHAPE_RECOGNIZED, handleShapeRecognized);\r\n\r\n    return () => {\r\n      socket.off(EVENTS.DRAW_START, handleRemoteDrawStart);\r\n      socket.off(EVENTS.DRAW_MOVE, handleRemoteDrawMove);\r\n      socket.off(EVENTS.SHAPE_RECOGNIZED, handleShapeRecognized);\r\n    };\r\n  }, [setElements, socket]);\r\n\r\n  // Drawing events\r\n  const handleMouseDown = (e) => {\r\n    const stage = e.target.getStage();\r\n    const pos = stage.getPointerPosition();\r\n    handleDrawStart(pos.x, pos.y);\r\n    setDebugInfo(\"Drawing started...\");\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDrawing) return;\r\n    const stage = e.target.getStage();\r\n    const pos = stage.getPointerPosition();\r\n    handleDrawMove(pos.x, pos.y);\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    if (!isDrawing) return;\r\n    handleDrawEnd();\r\n    \r\n    if (elements.length === 0) return;\r\n    \r\n    const lastElement = elements[elements.length - 1];\r\n    if (lastElement.type === SHAPES.FREEHAND && lastElement.points.length >= 8) {\r\n      try {\r\n        console.log(\"Attempting shape recognition with points:\", lastElement.points.length);\r\n        const recognized = recognizeShape(lastElement.points);\r\n        console.log(\"Recognition result:\", recognized);\r\n        \r\n        if (recognized) {\r\n          console.log(`Recognized as ${recognized.type}`);\r\n          // Add the corrected shape alongside the original drawing\r\n          const correctedShape = {\r\n            ...recognized,\r\n            id: Date.now(),\r\n            isCorrected: true // Mark as AI-corrected shape\r\n          };\r\n          \r\n          setElements(prev => [...prev, correctedShape]);\r\n          \r\n          // Emit to other users\r\n          socket.emit(EVENTS.SHAPE_RECOGNIZED, {\r\n            roomId,\r\n            shape: correctedShape\r\n          });\r\n          \r\n          setDebugInfo(`Shape corrected: ${recognized.type}`);\r\n        } else {\r\n          console.log(\"No shape recognized - keeping as freehand\");\r\n          setDebugInfo(\"No shape recognized\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Recognition error:\", error);\r\n        setDebugInfo(`Recognition error: ${error.message}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Add temporary debug layer\r\n  const renderDebugLayer = () => {\r\n    if (!isDrawing || elements.length === 0) return null;\r\n    \r\n    const lastElement = elements[elements.length - 1];\r\n    if (lastElement.type !== SHAPES.FREEHAND) return null;\r\n    \r\n    return (\r\n      <Layer>\r\n        {lastElement.points.map((point, i) => (\r\n          <Circle\r\n            key={`point-${i}`}\r\n            x={point[0]}\r\n            y={point[1]}\r\n            radius={2}\r\n            fill=\"red\"\r\n            opacity={0.5}\r\n          />\r\n        ))}\r\n        \r\n        {/* Bounding box */}\r\n        {lastElement.points.length > 10 && (\r\n          <Rect\r\n            x={Math.min(...lastElement.points.map(p => p[0]))}\r\n            y={Math.min(...lastElement.points.map(p => p[1]))}\r\n            width={\r\n              Math.max(...lastElement.points.map(p => p[0])) - \r\n              Math.min(...lastElement.points.map(p => p[0]))\r\n            }\r\n            height={\r\n              Math.max(...lastElement.points.map(p => p[1])) - \r\n              Math.min(...lastElement.points.map(p => p[1]))\r\n            }\r\n            stroke=\"blue\"\r\n            strokeWidth={1}\r\n            dash={[5, 5]}\r\n          />\r\n        )}\r\n      </Layer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"whiteboard\">\r\n      <div className=\"debug-info\">{debugInfo}</div>\r\n      \r\n      <Stage\r\n        width={stageSize.width}\r\n        height={stageSize.height}\r\n        onMouseDown={handleMouseDown}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={handleMouseUp}\r\n        ref={stageRef}\r\n      >\r\n        <Layer>\r\n          {elements.map((element) => {\r\n            if (element.type === SHAPES.FREEHAND) {\r\n              return (\r\n                <Line\r\n                  key={element.id}\r\n                  points={element.points.flat()}\r\n                  stroke=\"#000\"\r\n                  strokeWidth={3}\r\n                  tension={0.5}\r\n                  lineCap=\"round\"\r\n                  lineJoin=\"round\"\r\n                  opacity={0.7} // Make original drawings slightly transparent\r\n                />\r\n              );\r\n            }\r\n            if (element.type === SHAPES.CIRCLE) {\r\n              return (\r\n                <Circle\r\n                  key={element.id}\r\n                  x={element.x + element.radius}\r\n                  y={element.y + element.radius}\r\n                  radius={element.radius}\r\n                  stroke={element.isCorrected ? \"#667eea\" : \"#000\"}\r\n                  strokeWidth={element.isCorrected ? 4 : 3}\r\n                  fill={element.isCorrected ? \"rgba(102, 126, 234, 0.1)\" : \"transparent\"}\r\n                  dash={element.isCorrected ? [5, 5] : []}\r\n                />\r\n              );\r\n            }\r\n            if (element.type === SHAPES.RECTANGLE) {\r\n              return (\r\n                <Rect\r\n                  key={element.id}\r\n                  x={element.x}\r\n                  y={element.y}\r\n                  width={element.width}\r\n                  height={element.height}\r\n                  stroke={element.isCorrected ? \"#667eea\" : \"#000\"}\r\n                  strokeWidth={element.isCorrected ? 4 : 3}\r\n                  fill={element.isCorrected ? \"rgba(102, 126, 234, 0.1)\" : \"transparent\"}\r\n                  dash={element.isCorrected ? [5, 5] : []}\r\n                />\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </Layer>\r\n        \r\n        {renderDebugLayer()}\r\n      </Stage>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Whiteboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}