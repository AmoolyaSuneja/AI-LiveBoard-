{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { SHAPES, EVENTS } from '../utils/constants';\nexport default function useDrawing(socket, roomId) {\n  _s();\n  const [elements, setElements] = useState([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const handleDrawStart = useCallback((x, y) => {\n    setIsDrawing(true);\n    const newElement = {\n      id: Date.now(),\n      type: SHAPES.FREEHAND,\n      points: [[x, y]]\n    };\n    setElements(prev => [...prev, newElement]);\n    socket.emit(EVENTS.DRAW_START, {\n      roomId,\n      element: newElement\n    });\n  }, [roomId, socket]);\n  const handleDrawMove = useCallback((x, y) => {\n    if (!isDrawing) return;\n    setElements(prev => {\n      if (prev.length === 0) return prev;\n      const lastIndex = prev.length - 1;\n      const lastElement = prev[lastIndex];\n\n      // Only update freehand drawings\n      if (lastElement.type === SHAPES.FREEHAND) {\n        const updatedElement = {\n          ...lastElement,\n          points: [...lastElement.points, [x, y]]\n        };\n        return [...prev.slice(0, lastIndex), updatedElement];\n      }\n      return prev;\n    });\n    socket.emit(EVENTS.DRAW_MOVE, {\n      roomId,\n      point: [x, y]\n    });\n  }, [isDrawing, roomId, socket]);\n  const handleDrawEnd = useCallback(() => {\n    setIsDrawing(false);\n    socket.emit(EVENTS.DRAW_END, {\n      roomId\n    });\n  }, [roomId, socket]);\n  return {\n    elements,\n    setElements,\n    isDrawing,\n    handleDrawStart,\n    handleDrawMove,\n    handleDrawEnd\n  };\n}\n_s(useDrawing, \"U8lc4Ygm9MwZzjpC6HY5129KPhM=\");","map":{"version":3,"names":["useState","useCallback","SHAPES","EVENTS","useDrawing","socket","roomId","_s","elements","setElements","isDrawing","setIsDrawing","handleDrawStart","x","y","newElement","id","Date","now","type","FREEHAND","points","prev","emit","DRAW_START","element","handleDrawMove","length","lastIndex","lastElement","updatedElement","slice","DRAW_MOVE","point","handleDrawEnd","DRAW_END"],"sources":["C:/Users/Amoolya Suneja/Desktop/AI-Liveboard/client/src/hooks/useDrawing.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { SHAPES, EVENTS } from '../utils/constants';\r\n\r\nexport default function useDrawing(socket, roomId) {\r\n  const [elements, setElements] = useState([]);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n\r\n  const handleDrawStart = useCallback((x, y) => {\r\n    setIsDrawing(true);\r\n    const newElement = {\r\n      id: Date.now(),\r\n      type: SHAPES.FREEHAND,\r\n      points: [[x, y]]\r\n    };\r\n    setElements(prev => [...prev, newElement]);\r\n    socket.emit(EVENTS.DRAW_START, { roomId, element: newElement });\r\n  }, [roomId, socket]);\r\n\r\n  const handleDrawMove = useCallback((x, y) => {\r\n    if (!isDrawing) return;\r\n    \r\n    setElements(prev => {\r\n      if (prev.length === 0) return prev;\r\n      \r\n      const lastIndex = prev.length - 1;\r\n      const lastElement = prev[lastIndex];\r\n      \r\n      // Only update freehand drawings\r\n      if (lastElement.type === SHAPES.FREEHAND) {\r\n        const updatedElement = {\r\n          ...lastElement,\r\n          points: [...lastElement.points, [x, y]]\r\n        };\r\n        \r\n        return [\r\n          ...prev.slice(0, lastIndex),\r\n          updatedElement\r\n        ];\r\n      }\r\n      return prev;\r\n    });\r\n    \r\n    socket.emit(EVENTS.DRAW_MOVE, { \r\n      roomId, \r\n      point: [x, y] \r\n    });\r\n  }, [isDrawing, roomId, socket]);\r\n\r\n  const handleDrawEnd = useCallback(() => {\r\n    setIsDrawing(false);\r\n    socket.emit(EVENTS.DRAW_END, { roomId });\r\n  }, [roomId, socket]);\r\n\r\n  return {\r\n    elements,\r\n    setElements,\r\n    isDrawing,\r\n    handleDrawStart,\r\n    handleDrawMove,\r\n    handleDrawEnd\r\n  };\r\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AAEnD,eAAe,SAASC,UAAUA,CAACC,MAAM,EAAEC,MAAM,EAAE;EAAAC,EAAA;EACjD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMY,eAAe,GAAGX,WAAW,CAAC,CAACY,CAAC,EAAEC,CAAC,KAAK;IAC5CH,YAAY,CAAC,IAAI,CAAC;IAClB,MAAMI,UAAU,GAAG;MACjBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdC,IAAI,EAAEjB,MAAM,CAACkB,QAAQ;MACrBC,MAAM,EAAE,CAAC,CAACR,CAAC,EAAEC,CAAC,CAAC;IACjB,CAAC;IACDL,WAAW,CAACa,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEP,UAAU,CAAC,CAAC;IAC1CV,MAAM,CAACkB,IAAI,CAACpB,MAAM,CAACqB,UAAU,EAAE;MAAElB,MAAM;MAAEmB,OAAO,EAAEV;IAAW,CAAC,CAAC;EACjE,CAAC,EAAE,CAACT,MAAM,EAAED,MAAM,CAAC,CAAC;EAEpB,MAAMqB,cAAc,GAAGzB,WAAW,CAAC,CAACY,CAAC,EAAEC,CAAC,KAAK;IAC3C,IAAI,CAACJ,SAAS,EAAE;IAEhBD,WAAW,CAACa,IAAI,IAAI;MAClB,IAAIA,IAAI,CAACK,MAAM,KAAK,CAAC,EAAE,OAAOL,IAAI;MAElC,MAAMM,SAAS,GAAGN,IAAI,CAACK,MAAM,GAAG,CAAC;MACjC,MAAME,WAAW,GAAGP,IAAI,CAACM,SAAS,CAAC;;MAEnC;MACA,IAAIC,WAAW,CAACV,IAAI,KAAKjB,MAAM,CAACkB,QAAQ,EAAE;QACxC,MAAMU,cAAc,GAAG;UACrB,GAAGD,WAAW;UACdR,MAAM,EAAE,CAAC,GAAGQ,WAAW,CAACR,MAAM,EAAE,CAACR,CAAC,EAAEC,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CACL,GAAGQ,IAAI,CAACS,KAAK,CAAC,CAAC,EAAEH,SAAS,CAAC,EAC3BE,cAAc,CACf;MACH;MACA,OAAOR,IAAI;IACb,CAAC,CAAC;IAEFjB,MAAM,CAACkB,IAAI,CAACpB,MAAM,CAAC6B,SAAS,EAAE;MAC5B1B,MAAM;MACN2B,KAAK,EAAE,CAACpB,CAAC,EAAEC,CAAC;IACd,CAAC,CAAC;EACJ,CAAC,EAAE,CAACJ,SAAS,EAAEJ,MAAM,EAAED,MAAM,CAAC,CAAC;EAE/B,MAAM6B,aAAa,GAAGjC,WAAW,CAAC,MAAM;IACtCU,YAAY,CAAC,KAAK,CAAC;IACnBN,MAAM,CAACkB,IAAI,CAACpB,MAAM,CAACgC,QAAQ,EAAE;MAAE7B;IAAO,CAAC,CAAC;EAC1C,CAAC,EAAE,CAACA,MAAM,EAAED,MAAM,CAAC,CAAC;EAEpB,OAAO;IACLG,QAAQ;IACRC,WAAW;IACXC,SAAS;IACTE,eAAe;IACfc,cAAc;IACdQ;EACF,CAAC;AACH;AAAC3B,EAAA,CA1DuBH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}